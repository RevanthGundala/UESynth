// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: uesynth.proto
// Original file comments:
// Copyright (C) 2025 UESynth Project
// SPDX-License-Identifier: GPL-3.0-or-later
//
#ifndef GRPC_uesynth_2eproto__INCLUDED
#define GRPC_uesynth_2eproto__INCLUDED

#include "uesynth.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace uesynth {

// Service definition for UESynth
class UESynthService final {
 public:
  static constexpr char const* service_full_name() {
    return "uesynth.UESynthService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Bidirectional streaming method
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>> ControlStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>>(ControlStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>> AsyncControlStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>>(AsyncControlStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>> PrepareAsyncControlStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>>(PrepareAsyncControlStreamRaw(context, cq));
    }
    // Unary methods
    //
    // Camera and Viewport Control
    virtual ::grpc::Status SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncSetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncSetCameraTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncSetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncSetCameraTransformRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::uesynth::GetCameraTransformResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetCameraTransformResponse>> AsyncGetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetCameraTransformResponse>>(AsyncGetCameraTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetCameraTransformResponse>> PrepareAsyncGetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetCameraTransformResponse>>(PrepareAsyncGetCameraTransformRaw(context, request, cq));
    }
    // Data Capture
    virtual ::grpc::Status CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> AsyncCaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(AsyncCaptureRgbImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> PrepareAsyncCaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(PrepareAsyncCaptureRgbImageRaw(context, request, cq));
    }
    virtual ::grpc::Status CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> AsyncCaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(AsyncCaptureDepthMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> PrepareAsyncCaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(PrepareAsyncCaptureDepthMapRaw(context, request, cq));
    }
    virtual ::grpc::Status CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> AsyncCaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(AsyncCaptureSegmentationMaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> PrepareAsyncCaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(PrepareAsyncCaptureSegmentationMaskRaw(context, request, cq));
    }
    // Object Manipulation
    virtual ::grpc::Status SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncSetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncSetObjectTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncSetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncSetObjectTransformRaw(context, request, cq));
    }
    virtual ::grpc::Status GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::uesynth::GetObjectTransformResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetObjectTransformResponse>> AsyncGetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetObjectTransformResponse>>(AsyncGetObjectTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetObjectTransformResponse>> PrepareAsyncGetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetObjectTransformResponse>>(PrepareAsyncGetObjectTransformRaw(context, request, cq));
    }
    // Additional Camera Control
    virtual ::grpc::Status CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncCreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncCreateCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncCreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncCreateCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncDestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncDestroyCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncDestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncDestroyCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncSetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncSetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncSetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncSetResolutionRaw(context, request, cq));
    }
    // Additional Data Capture
    virtual ::grpc::Status CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> AsyncCaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(AsyncCaptureNormalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> PrepareAsyncCaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(PrepareAsyncCaptureNormalsRaw(context, request, cq));
    }
    virtual ::grpc::Status CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> AsyncCaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(AsyncCaptureOpticalFlowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>> PrepareAsyncCaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>>(PrepareAsyncCaptureOpticalFlowRaw(context, request, cq));
    }
    // Additional Object Manipulation
    virtual ::grpc::Status SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncSpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncSpawnObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncSpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncSpawnObjectRaw(context, request, cq));
    }
    virtual ::grpc::Status DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncDestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncDestroyObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncDestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncDestroyObjectRaw(context, request, cq));
    }
    virtual ::grpc::Status SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncSetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncSetMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncSetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncSetMaterialRaw(context, request, cq));
    }
    // Scene Control
    virtual ::grpc::Status ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::uesynth::ListObjectsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ListObjectsResponse>> AsyncListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ListObjectsResponse>>(AsyncListObjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ListObjectsResponse>> PrepareAsyncListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ListObjectsResponse>>(PrepareAsyncListObjectsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::uesynth::CommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> AsyncSetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(AsyncSetLightingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>> PrepareAsyncSetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>>(PrepareAsyncSetLightingRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Bidirectional streaming method
      virtual void ControlStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::uesynth::ActionRequest,::uesynth::FrameResponse>* reactor) = 0;
      // Unary methods
      //
      // Camera and Viewport Control
      virtual void SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Data Capture
      virtual void CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Object Manipulation
      virtual void SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Additional Camera Control
      virtual void CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Additional Data Capture
      virtual void CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Additional Object Manipulation
      virtual void SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Scene Control
      virtual void ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* ControlStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* AsyncControlStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* PrepareAsyncControlStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncSetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncSetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetCameraTransformResponse>* AsyncGetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetCameraTransformResponse>* PrepareAsyncGetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* AsyncCaptureRgbImageRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* PrepareAsyncCaptureRgbImageRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* AsyncCaptureDepthMapRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* PrepareAsyncCaptureDepthMapRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* AsyncCaptureSegmentationMaskRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* PrepareAsyncCaptureSegmentationMaskRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncSetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncSetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetObjectTransformResponse>* AsyncGetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::GetObjectTransformResponse>* PrepareAsyncGetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncCreateCameraRaw(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncCreateCameraRaw(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncDestroyCameraRaw(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncDestroyCameraRaw(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncSetResolutionRaw(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncSetResolutionRaw(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* AsyncCaptureNormalsRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* PrepareAsyncCaptureNormalsRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* AsyncCaptureOpticalFlowRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ImageResponse>* PrepareAsyncCaptureOpticalFlowRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncSpawnObjectRaw(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncSpawnObjectRaw(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncDestroyObjectRaw(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncDestroyObjectRaw(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncSetMaterialRaw(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncSetMaterialRaw(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ListObjectsResponse>* AsyncListObjectsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::ListObjectsResponse>* PrepareAsyncListObjectsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* AsyncSetLightingRaw(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::uesynth::CommandResponse>* PrepareAsyncSetLightingRaw(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>> ControlStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>>(ControlStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>> AsyncControlStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>>(AsyncControlStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>> PrepareAsyncControlStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>>(PrepareAsyncControlStreamRaw(context, cq));
    }
    ::grpc::Status SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncSetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncSetCameraTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncSetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncSetCameraTransformRaw(context, request, cq));
    }
    ::grpc::Status GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::uesynth::GetCameraTransformResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::GetCameraTransformResponse>> AsyncGetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::GetCameraTransformResponse>>(AsyncGetCameraTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::GetCameraTransformResponse>> PrepareAsyncGetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::GetCameraTransformResponse>>(PrepareAsyncGetCameraTransformRaw(context, request, cq));
    }
    ::grpc::Status CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> AsyncCaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(AsyncCaptureRgbImageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> PrepareAsyncCaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(PrepareAsyncCaptureRgbImageRaw(context, request, cq));
    }
    ::grpc::Status CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> AsyncCaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(AsyncCaptureDepthMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> PrepareAsyncCaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(PrepareAsyncCaptureDepthMapRaw(context, request, cq));
    }
    ::grpc::Status CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> AsyncCaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(AsyncCaptureSegmentationMaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> PrepareAsyncCaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(PrepareAsyncCaptureSegmentationMaskRaw(context, request, cq));
    }
    ::grpc::Status SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncSetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncSetObjectTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncSetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncSetObjectTransformRaw(context, request, cq));
    }
    ::grpc::Status GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::uesynth::GetObjectTransformResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::GetObjectTransformResponse>> AsyncGetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::GetObjectTransformResponse>>(AsyncGetObjectTransformRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::GetObjectTransformResponse>> PrepareAsyncGetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::GetObjectTransformResponse>>(PrepareAsyncGetObjectTransformRaw(context, request, cq));
    }
    ::grpc::Status CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncCreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncCreateCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncCreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncCreateCameraRaw(context, request, cq));
    }
    ::grpc::Status DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncDestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncDestroyCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncDestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncDestroyCameraRaw(context, request, cq));
    }
    ::grpc::Status SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncSetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncSetResolutionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncSetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncSetResolutionRaw(context, request, cq));
    }
    ::grpc::Status CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> AsyncCaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(AsyncCaptureNormalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> PrepareAsyncCaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(PrepareAsyncCaptureNormalsRaw(context, request, cq));
    }
    ::grpc::Status CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> AsyncCaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(AsyncCaptureOpticalFlowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>> PrepareAsyncCaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>>(PrepareAsyncCaptureOpticalFlowRaw(context, request, cq));
    }
    ::grpc::Status SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncSpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncSpawnObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncSpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncSpawnObjectRaw(context, request, cq));
    }
    ::grpc::Status DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncDestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncDestroyObjectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncDestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncDestroyObjectRaw(context, request, cq));
    }
    ::grpc::Status SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncSetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncSetMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncSetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncSetMaterialRaw(context, request, cq));
    }
    ::grpc::Status ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::uesynth::ListObjectsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ListObjectsResponse>> AsyncListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ListObjectsResponse>>(AsyncListObjectsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ListObjectsResponse>> PrepareAsyncListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::ListObjectsResponse>>(PrepareAsyncListObjectsRaw(context, request, cq));
    }
    ::grpc::Status SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::uesynth::CommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> AsyncSetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(AsyncSetLightingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>> PrepareAsyncSetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>>(PrepareAsyncSetLightingRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ControlStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::uesynth::ActionRequest,::uesynth::FrameResponse>* reactor) override;
      void SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) override;
      void CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) override;
      void CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) override;
      void CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response, std::function<void(::grpc::Status)>) override;
      void GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) override;
      void CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)>) override;
      void CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)>) override;
      void SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* ControlStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* AsyncControlStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* PrepareAsyncControlStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncSetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncSetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::GetCameraTransformResponse>* AsyncGetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::GetCameraTransformResponse>* PrepareAsyncGetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* AsyncCaptureRgbImageRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* PrepareAsyncCaptureRgbImageRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* AsyncCaptureDepthMapRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* PrepareAsyncCaptureDepthMapRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* AsyncCaptureSegmentationMaskRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* PrepareAsyncCaptureSegmentationMaskRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncSetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncSetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::GetObjectTransformResponse>* AsyncGetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::GetObjectTransformResponse>* PrepareAsyncGetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncCreateCameraRaw(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncCreateCameraRaw(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncDestroyCameraRaw(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncDestroyCameraRaw(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncSetResolutionRaw(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncSetResolutionRaw(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* AsyncCaptureNormalsRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* PrepareAsyncCaptureNormalsRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* AsyncCaptureOpticalFlowRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* PrepareAsyncCaptureOpticalFlowRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncSpawnObjectRaw(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncSpawnObjectRaw(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncDestroyObjectRaw(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncDestroyObjectRaw(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncSetMaterialRaw(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncSetMaterialRaw(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ListObjectsResponse>* AsyncListObjectsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::ListObjectsResponse>* PrepareAsyncListObjectsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* AsyncSetLightingRaw(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* PrepareAsyncSetLightingRaw(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ControlStream_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCameraTransform_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCameraTransform_;
    const ::grpc::internal::RpcMethod rpcmethod_CaptureRgbImage_;
    const ::grpc::internal::RpcMethod rpcmethod_CaptureDepthMap_;
    const ::grpc::internal::RpcMethod rpcmethod_CaptureSegmentationMask_;
    const ::grpc::internal::RpcMethod rpcmethod_SetObjectTransform_;
    const ::grpc::internal::RpcMethod rpcmethod_GetObjectTransform_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_DestroyCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_SetResolution_;
    const ::grpc::internal::RpcMethod rpcmethod_CaptureNormals_;
    const ::grpc::internal::RpcMethod rpcmethod_CaptureOpticalFlow_;
    const ::grpc::internal::RpcMethod rpcmethod_SpawnObject_;
    const ::grpc::internal::RpcMethod rpcmethod_DestroyObject_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_ListObjects_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLighting_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Bidirectional streaming method
    virtual ::grpc::Status ControlStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::uesynth::FrameResponse, ::uesynth::ActionRequest>* stream);
    // Unary methods
    //
    // Camera and Viewport Control
    virtual ::grpc::Status SetCameraTransform(::grpc::ServerContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response);
    virtual ::grpc::Status GetCameraTransform(::grpc::ServerContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response);
    // Data Capture
    virtual ::grpc::Status CaptureRgbImage(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response);
    virtual ::grpc::Status CaptureDepthMap(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response);
    virtual ::grpc::Status CaptureSegmentationMask(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response);
    // Object Manipulation
    virtual ::grpc::Status SetObjectTransform(::grpc::ServerContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response);
    virtual ::grpc::Status GetObjectTransform(::grpc::ServerContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response);
    // Additional Camera Control
    virtual ::grpc::Status CreateCamera(::grpc::ServerContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response);
    virtual ::grpc::Status DestroyCamera(::grpc::ServerContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response);
    virtual ::grpc::Status SetResolution(::grpc::ServerContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response);
    // Additional Data Capture
    virtual ::grpc::Status CaptureNormals(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response);
    virtual ::grpc::Status CaptureOpticalFlow(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response);
    // Additional Object Manipulation
    virtual ::grpc::Status SpawnObject(::grpc::ServerContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response);
    virtual ::grpc::Status DestroyObject(::grpc::ServerContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response);
    virtual ::grpc::Status SetMaterial(::grpc::ServerContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response);
    // Scene Control
    virtual ::grpc::Status ListObjects(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response);
    virtual ::grpc::Status SetLighting(::grpc::ServerContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ControlStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ControlStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::uesynth::FrameResponse, ::uesynth::ActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::uesynth::FrameResponse, ::uesynth::ActionRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCameraTransform() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetCameraTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraTransform(::grpc::ServerContext* context, ::uesynth::SetCameraTransformRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCameraTransform() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetCameraTransformRequest* /*request*/, ::uesynth::GetCameraTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraTransform(::grpc::ServerContext* context, ::uesynth::GetCameraTransformRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::GetCameraTransformResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CaptureRgbImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CaptureRgbImage() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CaptureRgbImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureRgbImage(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureRgbImage(::grpc::ServerContext* context, ::uesynth::CaptureRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::ImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CaptureDepthMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CaptureDepthMap() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_CaptureDepthMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureDepthMap(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureDepthMap(::grpc::ServerContext* context, ::uesynth::CaptureRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::ImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CaptureSegmentationMask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CaptureSegmentationMask() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_CaptureSegmentationMask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureSegmentationMask(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureSegmentationMask(::grpc::ServerContext* context, ::uesynth::CaptureRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::ImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetObjectTransform() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetObjectTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetObjectTransform(::grpc::ServerContext* context, ::uesynth::SetObjectTransformRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetObjectTransform() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetObjectTransformRequest* /*request*/, ::uesynth::GetObjectTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectTransform(::grpc::ServerContext* context, ::uesynth::GetObjectTransformRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::GetObjectTransformResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCamera() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_CreateCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCamera(::grpc::ServerContext* /*context*/, const ::uesynth::CreateCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCamera(::grpc::ServerContext* context, ::uesynth::CreateCameraRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DestroyCamera() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DestroyCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCamera(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyCamera(::grpc::ServerContext* context, ::uesynth::DestroyCameraRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetResolution() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SetResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResolution(::grpc::ServerContext* /*context*/, const ::uesynth::SetResolutionRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResolution(::grpc::ServerContext* context, ::uesynth::SetResolutionRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CaptureNormals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CaptureNormals() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_CaptureNormals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureNormals(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureNormals(::grpc::ServerContext* context, ::uesynth::CaptureRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::ImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CaptureOpticalFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CaptureOpticalFlow() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_CaptureOpticalFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureOpticalFlow(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureOpticalFlow(::grpc::ServerContext* context, ::uesynth::CaptureRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::ImageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SpawnObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SpawnObject() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SpawnObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnObject(::grpc::ServerContext* /*context*/, const ::uesynth::SpawnObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnObject(::grpc::ServerContext* context, ::uesynth::SpawnObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DestroyObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DestroyObject() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_DestroyObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyObject(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyObject(::grpc::ServerContext* context, ::uesynth::DestroyObjectRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMaterial() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SetMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaterial(::grpc::ServerContext* /*context*/, const ::uesynth::SetMaterialRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaterial(::grpc::ServerContext* context, ::uesynth::SetMaterialRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListObjects() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_ListObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListObjects(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::uesynth::ListObjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListObjects(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::ListObjectsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLighting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLighting() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_SetLighting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLighting(::grpc::ServerContext* /*context*/, const ::uesynth::SetLightingRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLighting(::grpc::ServerContext* context, ::uesynth::SetLightingRequest* request, ::grpc::ServerAsyncResponseWriter< ::uesynth::CommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ControlStream<WithAsyncMethod_SetCameraTransform<WithAsyncMethod_GetCameraTransform<WithAsyncMethod_CaptureRgbImage<WithAsyncMethod_CaptureDepthMap<WithAsyncMethod_CaptureSegmentationMask<WithAsyncMethod_SetObjectTransform<WithAsyncMethod_GetObjectTransform<WithAsyncMethod_CreateCamera<WithAsyncMethod_DestroyCamera<WithAsyncMethod_SetResolution<WithAsyncMethod_CaptureNormals<WithAsyncMethod_CaptureOpticalFlow<WithAsyncMethod_SpawnObject<WithAsyncMethod_DestroyObject<WithAsyncMethod_SetMaterial<WithAsyncMethod_ListObjects<WithAsyncMethod_SetLighting<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ControlStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ControlStream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::uesynth::ActionRequest, ::uesynth::FrameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ControlStream(context); }));
    }
    ~WithCallbackMethod_ControlStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::uesynth::FrameResponse, ::uesynth::ActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* ControlStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetCameraTransform() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::SetCameraTransformRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response) { return this->SetCameraTransform(context, request, response); }));}
    void SetMessageAllocatorFor_SetCameraTransform(
        ::grpc::MessageAllocator< ::uesynth::SetCameraTransformRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::SetCameraTransformRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetCameraTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::SetCameraTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCameraTransform() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::GetCameraTransformRequest, ::uesynth::GetCameraTransformResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response) { return this->GetCameraTransform(context, request, response); }));}
    void SetMessageAllocatorFor_GetCameraTransform(
        ::grpc::MessageAllocator< ::uesynth::GetCameraTransformRequest, ::uesynth::GetCameraTransformResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::GetCameraTransformRequest, ::uesynth::GetCameraTransformResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetCameraTransformRequest* /*request*/, ::uesynth::GetCameraTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::GetCameraTransformRequest* /*request*/, ::uesynth::GetCameraTransformResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CaptureRgbImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CaptureRgbImage() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) { return this->CaptureRgbImage(context, request, response); }));}
    void SetMessageAllocatorFor_CaptureRgbImage(
        ::grpc::MessageAllocator< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CaptureRgbImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureRgbImage(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureRgbImage(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CaptureDepthMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CaptureDepthMap() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) { return this->CaptureDepthMap(context, request, response); }));}
    void SetMessageAllocatorFor_CaptureDepthMap(
        ::grpc::MessageAllocator< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CaptureDepthMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureDepthMap(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureDepthMap(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CaptureSegmentationMask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CaptureSegmentationMask() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) { return this->CaptureSegmentationMask(context, request, response); }));}
    void SetMessageAllocatorFor_CaptureSegmentationMask(
        ::grpc::MessageAllocator< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CaptureSegmentationMask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureSegmentationMask(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureSegmentationMask(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetObjectTransform() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::SetObjectTransformRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response) { return this->SetObjectTransform(context, request, response); }));}
    void SetMessageAllocatorFor_SetObjectTransform(
        ::grpc::MessageAllocator< ::uesynth::SetObjectTransformRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::SetObjectTransformRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetObjectTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetObjectTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::SetObjectTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetObjectTransform() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::GetObjectTransformRequest, ::uesynth::GetObjectTransformResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response) { return this->GetObjectTransform(context, request, response); }));}
    void SetMessageAllocatorFor_GetObjectTransform(
        ::grpc::MessageAllocator< ::uesynth::GetObjectTransformRequest, ::uesynth::GetObjectTransformResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::GetObjectTransformRequest, ::uesynth::GetObjectTransformResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetObjectTransformRequest* /*request*/, ::uesynth::GetObjectTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetObjectTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::GetObjectTransformRequest* /*request*/, ::uesynth::GetObjectTransformResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCamera() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::CreateCameraRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response) { return this->CreateCamera(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCamera(
        ::grpc::MessageAllocator< ::uesynth::CreateCameraRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::CreateCameraRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCamera(::grpc::ServerContext* /*context*/, const ::uesynth::CreateCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::CreateCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DestroyCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DestroyCamera() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::DestroyCameraRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response) { return this->DestroyCamera(context, request, response); }));}
    void SetMessageAllocatorFor_DestroyCamera(
        ::grpc::MessageAllocator< ::uesynth::DestroyCameraRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::DestroyCameraRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DestroyCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCamera(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DestroyCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::DestroyCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetResolution() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::SetResolutionRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response) { return this->SetResolution(context, request, response); }));}
    void SetMessageAllocatorFor_SetResolution(
        ::grpc::MessageAllocator< ::uesynth::SetResolutionRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::SetResolutionRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResolution(::grpc::ServerContext* /*context*/, const ::uesynth::SetResolutionRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::SetResolutionRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CaptureNormals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CaptureNormals() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) { return this->CaptureNormals(context, request, response); }));}
    void SetMessageAllocatorFor_CaptureNormals(
        ::grpc::MessageAllocator< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CaptureNormals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureNormals(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureNormals(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CaptureOpticalFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CaptureOpticalFlow() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) { return this->CaptureOpticalFlow(context, request, response); }));}
    void SetMessageAllocatorFor_CaptureOpticalFlow(
        ::grpc::MessageAllocator< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::CaptureRequest, ::uesynth::ImageResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CaptureOpticalFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureOpticalFlow(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureOpticalFlow(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SpawnObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SpawnObject() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::SpawnObjectRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response) { return this->SpawnObject(context, request, response); }));}
    void SetMessageAllocatorFor_SpawnObject(
        ::grpc::MessageAllocator< ::uesynth::SpawnObjectRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::SpawnObjectRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SpawnObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnObject(::grpc::ServerContext* /*context*/, const ::uesynth::SpawnObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnObject(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::SpawnObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DestroyObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DestroyObject() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::DestroyObjectRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response) { return this->DestroyObject(context, request, response); }));}
    void SetMessageAllocatorFor_DestroyObject(
        ::grpc::MessageAllocator< ::uesynth::DestroyObjectRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::DestroyObjectRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DestroyObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyObject(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DestroyObject(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::DestroyObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMaterial() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::SetMaterialRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response) { return this->SetMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_SetMaterial(
        ::grpc::MessageAllocator< ::uesynth::SetMaterialRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::SetMaterialRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaterial(::grpc::ServerContext* /*context*/, const ::uesynth::SetMaterialRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::SetMaterialRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListObjects() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::uesynth::ListObjectsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response) { return this->ListObjects(context, request, response); }));}
    void SetMessageAllocatorFor_ListObjects(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::uesynth::ListObjectsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::uesynth::ListObjectsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListObjects(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::uesynth::ListObjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::uesynth::ListObjectsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetLighting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetLighting() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::uesynth::SetLightingRequest, ::uesynth::CommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response) { return this->SetLighting(context, request, response); }));}
    void SetMessageAllocatorFor_SetLighting(
        ::grpc::MessageAllocator< ::uesynth::SetLightingRequest, ::uesynth::CommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::uesynth::SetLightingRequest, ::uesynth::CommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetLighting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLighting(::grpc::ServerContext* /*context*/, const ::uesynth::SetLightingRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLighting(
      ::grpc::CallbackServerContext* /*context*/, const ::uesynth::SetLightingRequest* /*request*/, ::uesynth::CommandResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ControlStream<WithCallbackMethod_SetCameraTransform<WithCallbackMethod_GetCameraTransform<WithCallbackMethod_CaptureRgbImage<WithCallbackMethod_CaptureDepthMap<WithCallbackMethod_CaptureSegmentationMask<WithCallbackMethod_SetObjectTransform<WithCallbackMethod_GetObjectTransform<WithCallbackMethod_CreateCamera<WithCallbackMethod_DestroyCamera<WithCallbackMethod_SetResolution<WithCallbackMethod_CaptureNormals<WithCallbackMethod_CaptureOpticalFlow<WithCallbackMethod_SpawnObject<WithCallbackMethod_DestroyObject<WithCallbackMethod_SetMaterial<WithCallbackMethod_ListObjects<WithCallbackMethod_SetLighting<Service > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ControlStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ControlStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ControlStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::uesynth::FrameResponse, ::uesynth::ActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCameraTransform() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetCameraTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCameraTransform() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetCameraTransformRequest* /*request*/, ::uesynth::GetCameraTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CaptureRgbImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CaptureRgbImage() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CaptureRgbImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureRgbImage(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CaptureDepthMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CaptureDepthMap() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_CaptureDepthMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureDepthMap(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CaptureSegmentationMask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CaptureSegmentationMask() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_CaptureSegmentationMask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureSegmentationMask(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetObjectTransform() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetObjectTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetObjectTransform() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetObjectTransformRequest* /*request*/, ::uesynth::GetObjectTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCamera() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_CreateCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCamera(::grpc::ServerContext* /*context*/, const ::uesynth::CreateCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DestroyCamera() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DestroyCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCamera(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetResolution() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResolution(::grpc::ServerContext* /*context*/, const ::uesynth::SetResolutionRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CaptureNormals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CaptureNormals() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_CaptureNormals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureNormals(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CaptureOpticalFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CaptureOpticalFlow() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_CaptureOpticalFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureOpticalFlow(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SpawnObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SpawnObject() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SpawnObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnObject(::grpc::ServerContext* /*context*/, const ::uesynth::SpawnObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DestroyObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DestroyObject() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_DestroyObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyObject(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMaterial() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SetMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaterial(::grpc::ServerContext* /*context*/, const ::uesynth::SetMaterialRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListObjects() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_ListObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListObjects(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::uesynth::ListObjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLighting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLighting() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_SetLighting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLighting(::grpc::ServerContext* /*context*/, const ::uesynth::SetLightingRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ControlStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ControlStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::uesynth::FrameResponse, ::uesynth::ActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCameraTransform() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetCameraTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraTransform(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCameraTransform() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetCameraTransformRequest* /*request*/, ::uesynth::GetCameraTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraTransform(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CaptureRgbImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CaptureRgbImage() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CaptureRgbImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureRgbImage(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureRgbImage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CaptureDepthMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CaptureDepthMap() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_CaptureDepthMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureDepthMap(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureDepthMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CaptureSegmentationMask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CaptureSegmentationMask() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_CaptureSegmentationMask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureSegmentationMask(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureSegmentationMask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetObjectTransform() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetObjectTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetObjectTransform(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetObjectTransform() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetObjectTransformRequest* /*request*/, ::uesynth::GetObjectTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetObjectTransform(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCamera() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_CreateCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCamera(::grpc::ServerContext* /*context*/, const ::uesynth::CreateCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DestroyCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DestroyCamera() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DestroyCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCamera(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetResolution() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SetResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResolution(::grpc::ServerContext* /*context*/, const ::uesynth::SetResolutionRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetResolution(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CaptureNormals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CaptureNormals() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_CaptureNormals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureNormals(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureNormals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CaptureOpticalFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CaptureOpticalFlow() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_CaptureOpticalFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureOpticalFlow(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCaptureOpticalFlow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SpawnObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SpawnObject() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SpawnObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnObject(::grpc::ServerContext* /*context*/, const ::uesynth::SpawnObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSpawnObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DestroyObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DestroyObject() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_DestroyObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyObject(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDestroyObject(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMaterial() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SetMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaterial(::grpc::ServerContext* /*context*/, const ::uesynth::SetMaterialRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListObjects() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_ListObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListObjects(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::uesynth::ListObjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListObjects(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLighting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLighting() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_SetLighting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLighting(::grpc::ServerContext* /*context*/, const ::uesynth::SetLightingRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLighting(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ControlStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ControlStream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ControlStream(context); }));
    }
    ~WithRawCallbackMethod_ControlStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::uesynth::FrameResponse, ::uesynth::ActionRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ControlStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetCameraTransform() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCameraTransform(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetCameraTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetCameraTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCameraTransform() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCameraTransform(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetCameraTransformRequest* /*request*/, ::uesynth::GetCameraTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CaptureRgbImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CaptureRgbImage() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CaptureRgbImage(context, request, response); }));
    }
    ~WithRawCallbackMethod_CaptureRgbImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureRgbImage(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureRgbImage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CaptureDepthMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CaptureDepthMap() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CaptureDepthMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_CaptureDepthMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureDepthMap(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureDepthMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CaptureSegmentationMask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CaptureSegmentationMask() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CaptureSegmentationMask(context, request, response); }));
    }
    ~WithRawCallbackMethod_CaptureSegmentationMask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureSegmentationMask(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureSegmentationMask(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetObjectTransform() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetObjectTransform(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetObjectTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetObjectTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetObjectTransform() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetObjectTransform(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetObjectTransformRequest* /*request*/, ::uesynth::GetObjectTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetObjectTransform(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCamera() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCamera(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCamera(::grpc::ServerContext* /*context*/, const ::uesynth::CreateCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DestroyCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DestroyCamera() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DestroyCamera(context, request, response); }));
    }
    ~WithRawCallbackMethod_DestroyCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyCamera(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DestroyCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetResolution() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetResolution(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetResolution(::grpc::ServerContext* /*context*/, const ::uesynth::SetResolutionRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetResolution(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CaptureNormals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CaptureNormals() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CaptureNormals(context, request, response); }));
    }
    ~WithRawCallbackMethod_CaptureNormals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureNormals(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureNormals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CaptureOpticalFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CaptureOpticalFlow() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CaptureOpticalFlow(context, request, response); }));
    }
    ~WithRawCallbackMethod_CaptureOpticalFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CaptureOpticalFlow(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CaptureOpticalFlow(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SpawnObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SpawnObject() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SpawnObject(context, request, response); }));
    }
    ~WithRawCallbackMethod_SpawnObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SpawnObject(::grpc::ServerContext* /*context*/, const ::uesynth::SpawnObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SpawnObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DestroyObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DestroyObject() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DestroyObject(context, request, response); }));
    }
    ~WithRawCallbackMethod_DestroyObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DestroyObject(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DestroyObject(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMaterial() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMaterial(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaterial(::grpc::ServerContext* /*context*/, const ::uesynth::SetMaterialRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListObjects() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListObjects(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListObjects(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::uesynth::ListObjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListObjects(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetLighting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetLighting() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLighting(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetLighting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLighting(::grpc::ServerContext* /*context*/, const ::uesynth::SetLightingRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLighting(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCameraTransform() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::SetCameraTransformRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::SetCameraTransformRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedSetCameraTransform(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetCameraTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCameraTransform(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::SetCameraTransformRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCameraTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCameraTransform() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::GetCameraTransformRequest, ::uesynth::GetCameraTransformResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::GetCameraTransformRequest, ::uesynth::GetCameraTransformResponse>* streamer) {
                       return this->StreamedGetCameraTransform(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCameraTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCameraTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetCameraTransformRequest* /*request*/, ::uesynth::GetCameraTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCameraTransform(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::GetCameraTransformRequest,::uesynth::GetCameraTransformResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CaptureRgbImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CaptureRgbImage() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* streamer) {
                       return this->StreamedCaptureRgbImage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CaptureRgbImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CaptureRgbImage(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCaptureRgbImage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::CaptureRequest,::uesynth::ImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CaptureDepthMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CaptureDepthMap() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* streamer) {
                       return this->StreamedCaptureDepthMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CaptureDepthMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CaptureDepthMap(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCaptureDepthMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::CaptureRequest,::uesynth::ImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CaptureSegmentationMask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CaptureSegmentationMask() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* streamer) {
                       return this->StreamedCaptureSegmentationMask(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CaptureSegmentationMask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CaptureSegmentationMask(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCaptureSegmentationMask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::CaptureRequest,::uesynth::ImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetObjectTransform() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::SetObjectTransformRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::SetObjectTransformRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedSetObjectTransform(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::SetObjectTransformRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetObjectTransform(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::SetObjectTransformRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetObjectTransform : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetObjectTransform() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::GetObjectTransformRequest, ::uesynth::GetObjectTransformResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::GetObjectTransformRequest, ::uesynth::GetObjectTransformResponse>* streamer) {
                       return this->StreamedGetObjectTransform(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetObjectTransform() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetObjectTransform(::grpc::ServerContext* /*context*/, const ::uesynth::GetObjectTransformRequest* /*request*/, ::uesynth::GetObjectTransformResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetObjectTransform(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::GetObjectTransformRequest,::uesynth::GetObjectTransformResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCamera() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::CreateCameraRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::CreateCameraRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedCreateCamera(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCamera(::grpc::ServerContext* /*context*/, const ::uesynth::CreateCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::CreateCameraRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DestroyCamera() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::DestroyCameraRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::DestroyCameraRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedDestroyCamera(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DestroyCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyCamera(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyCameraRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::DestroyCameraRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetResolution : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetResolution() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::SetResolutionRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::SetResolutionRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedSetResolution(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetResolution() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetResolution(::grpc::ServerContext* /*context*/, const ::uesynth::SetResolutionRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetResolution(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::SetResolutionRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CaptureNormals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CaptureNormals() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* streamer) {
                       return this->StreamedCaptureNormals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CaptureNormals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CaptureNormals(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCaptureNormals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::CaptureRequest,::uesynth::ImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CaptureOpticalFlow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CaptureOpticalFlow() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::CaptureRequest, ::uesynth::ImageResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::CaptureRequest, ::uesynth::ImageResponse>* streamer) {
                       return this->StreamedCaptureOpticalFlow(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CaptureOpticalFlow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CaptureOpticalFlow(::grpc::ServerContext* /*context*/, const ::uesynth::CaptureRequest* /*request*/, ::uesynth::ImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCaptureOpticalFlow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::CaptureRequest,::uesynth::ImageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SpawnObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SpawnObject() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::SpawnObjectRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::SpawnObjectRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedSpawnObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SpawnObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SpawnObject(::grpc::ServerContext* /*context*/, const ::uesynth::SpawnObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSpawnObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::SpawnObjectRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DestroyObject : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DestroyObject() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::DestroyObjectRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::DestroyObjectRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedDestroyObject(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DestroyObject() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DestroyObject(::grpc::ServerContext* /*context*/, const ::uesynth::DestroyObjectRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDestroyObject(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::DestroyObjectRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMaterial() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::SetMaterialRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::SetMaterialRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedSetMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMaterial(::grpc::ServerContext* /*context*/, const ::uesynth::SetMaterialRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::SetMaterialRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListObjects : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListObjects() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::uesynth::ListObjectsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::uesynth::ListObjectsResponse>* streamer) {
                       return this->StreamedListObjects(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListObjects() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListObjects(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::uesynth::ListObjectsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListObjects(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::uesynth::ListObjectsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLighting : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLighting() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::uesynth::SetLightingRequest, ::uesynth::CommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::uesynth::SetLightingRequest, ::uesynth::CommandResponse>* streamer) {
                       return this->StreamedSetLighting(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLighting() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLighting(::grpc::ServerContext* /*context*/, const ::uesynth::SetLightingRequest* /*request*/, ::uesynth::CommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLighting(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::uesynth::SetLightingRequest,::uesynth::CommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetCameraTransform<WithStreamedUnaryMethod_GetCameraTransform<WithStreamedUnaryMethod_CaptureRgbImage<WithStreamedUnaryMethod_CaptureDepthMap<WithStreamedUnaryMethod_CaptureSegmentationMask<WithStreamedUnaryMethod_SetObjectTransform<WithStreamedUnaryMethod_GetObjectTransform<WithStreamedUnaryMethod_CreateCamera<WithStreamedUnaryMethod_DestroyCamera<WithStreamedUnaryMethod_SetResolution<WithStreamedUnaryMethod_CaptureNormals<WithStreamedUnaryMethod_CaptureOpticalFlow<WithStreamedUnaryMethod_SpawnObject<WithStreamedUnaryMethod_DestroyObject<WithStreamedUnaryMethod_SetMaterial<WithStreamedUnaryMethod_ListObjects<WithStreamedUnaryMethod_SetLighting<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetCameraTransform<WithStreamedUnaryMethod_GetCameraTransform<WithStreamedUnaryMethod_CaptureRgbImage<WithStreamedUnaryMethod_CaptureDepthMap<WithStreamedUnaryMethod_CaptureSegmentationMask<WithStreamedUnaryMethod_SetObjectTransform<WithStreamedUnaryMethod_GetObjectTransform<WithStreamedUnaryMethod_CreateCamera<WithStreamedUnaryMethod_DestroyCamera<WithStreamedUnaryMethod_SetResolution<WithStreamedUnaryMethod_CaptureNormals<WithStreamedUnaryMethod_CaptureOpticalFlow<WithStreamedUnaryMethod_SpawnObject<WithStreamedUnaryMethod_DestroyObject<WithStreamedUnaryMethod_SetMaterial<WithStreamedUnaryMethod_ListObjects<WithStreamedUnaryMethod_SetLighting<Service > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace uesynth


#endif  // GRPC_uesynth_2eproto__INCLUDED
