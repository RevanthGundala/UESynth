// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: uesynth.proto

#include "uesynth.pb.h"
#include "uesynth.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace uesynth {

static const char* UESynthService_method_names[] = {
  "/uesynth.UESynthService/ControlStream",
  "/uesynth.UESynthService/SetCameraTransform",
  "/uesynth.UESynthService/GetCameraTransform",
  "/uesynth.UESynthService/CaptureRgbImage",
  "/uesynth.UESynthService/CaptureDepthMap",
  "/uesynth.UESynthService/CaptureSegmentationMask",
  "/uesynth.UESynthService/SetObjectTransform",
  "/uesynth.UESynthService/GetObjectTransform",
  "/uesynth.UESynthService/CreateCamera",
  "/uesynth.UESynthService/DestroyCamera",
  "/uesynth.UESynthService/SetResolution",
  "/uesynth.UESynthService/CaptureNormals",
  "/uesynth.UESynthService/CaptureOpticalFlow",
  "/uesynth.UESynthService/SpawnObject",
  "/uesynth.UESynthService/DestroyObject",
  "/uesynth.UESynthService/SetMaterial",
  "/uesynth.UESynthService/ListObjects",
  "/uesynth.UESynthService/SetLighting",
};

std::unique_ptr< UESynthService::Stub> UESynthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UESynthService::Stub> stub(new UESynthService::Stub(channel, options));
  return stub;
}

UESynthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ControlStream_(UESynthService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SetCameraTransform_(UESynthService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCameraTransform_(UESynthService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CaptureRgbImage_(UESynthService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CaptureDepthMap_(UESynthService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CaptureSegmentationMask_(UESynthService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetObjectTransform_(UESynthService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetObjectTransform_(UESynthService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCamera_(UESynthService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyCamera_(UESynthService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetResolution_(UESynthService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CaptureNormals_(UESynthService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CaptureOpticalFlow_(UESynthService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SpawnObject_(UESynthService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyObject_(UESynthService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMaterial_(UESynthService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListObjects_(UESynthService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLighting_(UESynthService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* UESynthService::Stub::ControlStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::uesynth::ActionRequest, ::uesynth::FrameResponse>::Create(channel_.get(), rpcmethod_ControlStream_, context);
}

void UESynthService::Stub::async::ControlStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::uesynth::ActionRequest,::uesynth::FrameResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::uesynth::ActionRequest,::uesynth::FrameResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ControlStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* UESynthService::Stub::AsyncControlStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::uesynth::ActionRequest, ::uesynth::FrameResponse>::Create(channel_.get(), cq, rpcmethod_ControlStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::uesynth::ActionRequest, ::uesynth::FrameResponse>* UESynthService::Stub::PrepareAsyncControlStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::uesynth::ActionRequest, ::uesynth::FrameResponse>::Create(channel_.get(), cq, rpcmethod_ControlStream_, context, false, nullptr);
}

::grpc::Status UESynthService::Stub::SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::SetCameraTransformRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCameraTransform_, context, request, response);
}

void UESynthService::Stub::async::SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::SetCameraTransformRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraTransform_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::SetCameraTransform(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCameraTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncSetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::SetCameraTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCameraTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncSetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCameraTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::uesynth::GetCameraTransformResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::GetCameraTransformRequest, ::uesynth::GetCameraTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCameraTransform_, context, request, response);
}

void UESynthService::Stub::async::GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::GetCameraTransformRequest, ::uesynth::GetCameraTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraTransform_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::GetCameraTransform(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::GetCameraTransformResponse>* UESynthService::Stub::PrepareAsyncGetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::GetCameraTransformResponse, ::uesynth::GetCameraTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCameraTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::GetCameraTransformResponse>* UESynthService::Stub::AsyncGetCameraTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetCameraTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCameraTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CaptureRgbImage_, context, request, response);
}

void UESynthService::Stub::async::CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureRgbImage_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::CaptureRgbImage(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureRgbImage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::PrepareAsyncCaptureRgbImageRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::ImageResponse, ::uesynth::CaptureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CaptureRgbImage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::AsyncCaptureRgbImageRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCaptureRgbImageRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CaptureDepthMap_, context, request, response);
}

void UESynthService::Stub::async::CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureDepthMap_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::CaptureDepthMap(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureDepthMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::PrepareAsyncCaptureDepthMapRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::ImageResponse, ::uesynth::CaptureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CaptureDepthMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::AsyncCaptureDepthMapRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCaptureDepthMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CaptureSegmentationMask_, context, request, response);
}

void UESynthService::Stub::async::CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureSegmentationMask_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::CaptureSegmentationMask(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureSegmentationMask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::PrepareAsyncCaptureSegmentationMaskRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::ImageResponse, ::uesynth::CaptureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CaptureSegmentationMask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::AsyncCaptureSegmentationMaskRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCaptureSegmentationMaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::SetObjectTransformRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetObjectTransform_, context, request, response);
}

void UESynthService::Stub::async::SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::SetObjectTransformRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetObjectTransform_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::SetObjectTransform(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetObjectTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncSetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::SetObjectTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetObjectTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncSetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::SetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetObjectTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::uesynth::GetObjectTransformResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::GetObjectTransformRequest, ::uesynth::GetObjectTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetObjectTransform_, context, request, response);
}

void UESynthService::Stub::async::GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::GetObjectTransformRequest, ::uesynth::GetObjectTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectTransform_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::GetObjectTransform(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetObjectTransform_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::GetObjectTransformResponse>* UESynthService::Stub::PrepareAsyncGetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::GetObjectTransformResponse, ::uesynth::GetObjectTransformRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetObjectTransform_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::GetObjectTransformResponse>* UESynthService::Stub::AsyncGetObjectTransformRaw(::grpc::ClientContext* context, const ::uesynth::GetObjectTransformRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetObjectTransformRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::CreateCameraRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCamera_, context, request, response);
}

void UESynthService::Stub::async::CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::CreateCameraRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCamera_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::CreateCamera(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCamera_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncCreateCameraRaw(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::CreateCameraRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCamera_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncCreateCameraRaw(::grpc::ClientContext* context, const ::uesynth::CreateCameraRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCameraRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::DestroyCameraRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyCamera_, context, request, response);
}

void UESynthService::Stub::async::DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::DestroyCameraRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyCamera_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::DestroyCamera(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyCamera_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncDestroyCameraRaw(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::DestroyCameraRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyCamera_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncDestroyCameraRaw(::grpc::ClientContext* context, const ::uesynth::DestroyCameraRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyCameraRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::SetResolutionRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetResolution_, context, request, response);
}

void UESynthService::Stub::async::SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::SetResolutionRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetResolution_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::SetResolution(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetResolution_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncSetResolutionRaw(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::SetResolutionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetResolution_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncSetResolutionRaw(::grpc::ClientContext* context, const ::uesynth::SetResolutionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetResolutionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CaptureNormals_, context, request, response);
}

void UESynthService::Stub::async::CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureNormals_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::CaptureNormals(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureNormals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::PrepareAsyncCaptureNormalsRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::ImageResponse, ::uesynth::CaptureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CaptureNormals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::AsyncCaptureNormalsRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCaptureNormalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::uesynth::ImageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CaptureOpticalFlow_, context, request, response);
}

void UESynthService::Stub::async::CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureOpticalFlow_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::CaptureOpticalFlow(::grpc::ClientContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CaptureOpticalFlow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::PrepareAsyncCaptureOpticalFlowRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::ImageResponse, ::uesynth::CaptureRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CaptureOpticalFlow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ImageResponse>* UESynthService::Stub::AsyncCaptureOpticalFlowRaw(::grpc::ClientContext* context, const ::uesynth::CaptureRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCaptureOpticalFlowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::SpawnObjectRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SpawnObject_, context, request, response);
}

void UESynthService::Stub::async::SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::SpawnObjectRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnObject_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::SpawnObject(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SpawnObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncSpawnObjectRaw(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::SpawnObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SpawnObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncSpawnObjectRaw(::grpc::ClientContext* context, const ::uesynth::SpawnObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSpawnObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::DestroyObjectRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyObject_, context, request, response);
}

void UESynthService::Stub::async::DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::DestroyObjectRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyObject_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::DestroyObject(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncDestroyObjectRaw(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::DestroyObjectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncDestroyObjectRaw(::grpc::ClientContext* context, const ::uesynth::DestroyObjectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::SetMaterialRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMaterial_, context, request, response);
}

void UESynthService::Stub::async::SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::SetMaterialRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaterial_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::SetMaterial(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaterial_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncSetMaterialRaw(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::SetMaterialRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMaterial_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncSetMaterialRaw(::grpc::ClientContext* context, const ::uesynth::SetMaterialRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMaterialRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::uesynth::ListObjectsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::uesynth::ListObjectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListObjects_, context, request, response);
}

void UESynthService::Stub::async::ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::uesynth::ListObjectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListObjects_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::ListObjects(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListObjects_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ListObjectsResponse>* UESynthService::Stub::PrepareAsyncListObjectsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::ListObjectsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListObjects_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::ListObjectsResponse>* UESynthService::Stub::AsyncListObjectsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListObjectsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UESynthService::Stub::SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::uesynth::CommandResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::uesynth::SetLightingRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLighting_, context, request, response);
}

void UESynthService::Stub::async::SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::uesynth::SetLightingRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLighting_, context, request, response, std::move(f));
}

void UESynthService::Stub::async::SetLighting(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLighting_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::PrepareAsyncSetLightingRaw(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::uesynth::CommandResponse, ::uesynth::SetLightingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLighting_, context, request);
}

::grpc::ClientAsyncResponseReader< ::uesynth::CommandResponse>* UESynthService::Stub::AsyncSetLightingRaw(::grpc::ClientContext* context, const ::uesynth::SetLightingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLightingRaw(context, request, cq);
  result->StartCall();
  return result;
}

UESynthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[0],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< UESynthService::Service, ::uesynth::ActionRequest, ::uesynth::FrameResponse>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::uesynth::FrameResponse,
             ::uesynth::ActionRequest>* stream) {
               return service->ControlStream(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::SetCameraTransformRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::SetCameraTransformRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->SetCameraTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::GetCameraTransformRequest, ::uesynth::GetCameraTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::GetCameraTransformRequest* req,
             ::uesynth::GetCameraTransformResponse* resp) {
               return service->GetCameraTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::CaptureRequest* req,
             ::uesynth::ImageResponse* resp) {
               return service->CaptureRgbImage(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::CaptureRequest* req,
             ::uesynth::ImageResponse* resp) {
               return service->CaptureDepthMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::CaptureRequest* req,
             ::uesynth::ImageResponse* resp) {
               return service->CaptureSegmentationMask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::SetObjectTransformRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::SetObjectTransformRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->SetObjectTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::GetObjectTransformRequest, ::uesynth::GetObjectTransformResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::GetObjectTransformRequest* req,
             ::uesynth::GetObjectTransformResponse* resp) {
               return service->GetObjectTransform(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::CreateCameraRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::CreateCameraRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->CreateCamera(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::DestroyCameraRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::DestroyCameraRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->DestroyCamera(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::SetResolutionRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::SetResolutionRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->SetResolution(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::CaptureRequest* req,
             ::uesynth::ImageResponse* resp) {
               return service->CaptureNormals(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::CaptureRequest, ::uesynth::ImageResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::CaptureRequest* req,
             ::uesynth::ImageResponse* resp) {
               return service->CaptureOpticalFlow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::SpawnObjectRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::SpawnObjectRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->SpawnObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::DestroyObjectRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::DestroyObjectRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->DestroyObject(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::SetMaterialRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::SetMaterialRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->SetMaterial(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::google::protobuf::Empty, ::uesynth::ListObjectsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::uesynth::ListObjectsResponse* resp) {
               return service->ListObjects(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UESynthService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UESynthService::Service, ::uesynth::SetLightingRequest, ::uesynth::CommandResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UESynthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::uesynth::SetLightingRequest* req,
             ::uesynth::CommandResponse* resp) {
               return service->SetLighting(ctx, req, resp);
             }, this)));
}

UESynthService::Service::~Service() {
}

::grpc::Status UESynthService::Service::ControlStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::uesynth::FrameResponse, ::uesynth::ActionRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::SetCameraTransform(::grpc::ServerContext* context, const ::uesynth::SetCameraTransformRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::GetCameraTransform(::grpc::ServerContext* context, const ::uesynth::GetCameraTransformRequest* request, ::uesynth::GetCameraTransformResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::CaptureRgbImage(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::CaptureDepthMap(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::CaptureSegmentationMask(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::SetObjectTransform(::grpc::ServerContext* context, const ::uesynth::SetObjectTransformRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::GetObjectTransform(::grpc::ServerContext* context, const ::uesynth::GetObjectTransformRequest* request, ::uesynth::GetObjectTransformResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::CreateCamera(::grpc::ServerContext* context, const ::uesynth::CreateCameraRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::DestroyCamera(::grpc::ServerContext* context, const ::uesynth::DestroyCameraRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::SetResolution(::grpc::ServerContext* context, const ::uesynth::SetResolutionRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::CaptureNormals(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::CaptureOpticalFlow(::grpc::ServerContext* context, const ::uesynth::CaptureRequest* request, ::uesynth::ImageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::SpawnObject(::grpc::ServerContext* context, const ::uesynth::SpawnObjectRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::DestroyObject(::grpc::ServerContext* context, const ::uesynth::DestroyObjectRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::SetMaterial(::grpc::ServerContext* context, const ::uesynth::SetMaterialRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::ListObjects(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::uesynth::ListObjectsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UESynthService::Service::SetLighting(::grpc::ServerContext* context, const ::uesynth::SetLightingRequest* request, ::uesynth::CommandResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace uesynth

