#if defined(_MSC_VER)
  #pragma warning (disable:4018) // 'expression' : signed/unsigned mismatch
  #pragma warning (disable:4065) // switch statement contains 'default' but no 'case' labels
  #pragma warning (disable:4146) // unary minus operator applied to unsigned type, result still unsigned
  #pragma warning (disable:4244) // 'conversion' conversion from 'type1' to 'type2', possible loss of data
  #pragma warning (disable:4251) // 'identifier' : class 'type' needs to have dll-interface to be used by clients of class 'type2'
  #pragma warning (disable:4267) // 'var' : conversion from 'size_t' to 'type', possible loss of data
  #pragma warning (disable:4305) // 'identifier' : truncation from 'type1' to 'type2'
  #pragma warning (disable:4307) // 'operator' : integral constant overflow
  #pragma warning (disable:4309) // 'conversion' : truncation of constant value
  #pragma warning (disable:4334) // 'operator' : result of 32-bit shift implicitly converted to 64 bits (was 64-bit shift intended?)
  #pragma warning (disable:4355) // 'this' : used in base member initializer list
  #pragma warning (disable:4506) // no definition for inline function 'function'
  #pragma warning (disable:4996) // The compiler encountered a deprecated declaration.
  #pragma warning (disable:4125) // decimal digit terminates octal escape sequence
#endif
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uesynth.proto

#include "uesynth.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace uesynth {
template <typename>
PROTOBUF_CONSTEXPR ActionRequest::ActionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.action_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ActionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActionRequestDefaultTypeInternal() {}
  union {
    ActionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActionRequestDefaultTypeInternal _ActionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR FrameResponse::FrameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct FrameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FrameResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FrameResponseDefaultTypeInternal() {}
  union {
    FrameResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FrameResponseDefaultTypeInternal _FrameResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/ 0

  , /*decltype(_impl_.y_)*/ 0

  , /*decltype(_impl_.z_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Rotator::Rotator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pitch_)*/ 0

  , /*decltype(_impl_.yaw_)*/ 0

  , /*decltype(_impl_.roll_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RotatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotatorDefaultTypeInternal() {}
  union {
    Rotator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotatorDefaultTypeInternal _Rotator_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR Transform::Transform(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.location_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.scale_)*/nullptr} {}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CommandResponse::CommandResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.success_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandResponseDefaultTypeInternal() {}
  union {
    CommandResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetCameraTransformRequest::SetCameraTransformRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transform_)*/nullptr} {}
struct SetCameraTransformRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetCameraTransformRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetCameraTransformRequestDefaultTypeInternal() {}
  union {
    SetCameraTransformRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetCameraTransformRequestDefaultTypeInternal _SetCameraTransformRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetCameraTransformRequest::GetCameraTransformRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camera_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCameraTransformRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCameraTransformRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCameraTransformRequestDefaultTypeInternal() {}
  union {
    GetCameraTransformRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCameraTransformRequestDefaultTypeInternal _GetCameraTransformRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetCameraTransformResponse::GetCameraTransformResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_.success_)*/ false
} {}
struct GetCameraTransformResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCameraTransformResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCameraTransformResponseDefaultTypeInternal() {}
  union {
    GetCameraTransformResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCameraTransformResponseDefaultTypeInternal _GetCameraTransformResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CaptureRequest::CaptureRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camera_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.width_)*/ 0u

  , /*decltype(_impl_.height_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CaptureRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CaptureRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CaptureRequestDefaultTypeInternal() {}
  union {
    CaptureRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CaptureRequestDefaultTypeInternal _CaptureRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ImageResponse::ImageResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.format_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.width_)*/ 0u

  , /*decltype(_impl_.height_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageResponseDefaultTypeInternal() {}
  union {
    ImageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageResponseDefaultTypeInternal _ImageResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetObjectTransformRequest::SetObjectTransformRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transform_)*/nullptr} {}
struct SetObjectTransformRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetObjectTransformRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetObjectTransformRequestDefaultTypeInternal() {}
  union {
    SetObjectTransformRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetObjectTransformRequestDefaultTypeInternal _SetObjectTransformRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetObjectTransformRequest::GetObjectTransformRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetObjectTransformRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetObjectTransformRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetObjectTransformRequestDefaultTypeInternal() {}
  union {
    GetObjectTransformRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetObjectTransformRequestDefaultTypeInternal _GetObjectTransformRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR GetObjectTransformResponse::GetObjectTransformResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_.success_)*/ false
} {}
struct GetObjectTransformResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetObjectTransformResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetObjectTransformResponseDefaultTypeInternal() {}
  union {
    GetObjectTransformResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetObjectTransformResponseDefaultTypeInternal _GetObjectTransformResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR CreateCameraRequest::CreateCameraRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initial_transform_)*/nullptr} {}
struct CreateCameraRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateCameraRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateCameraRequestDefaultTypeInternal() {}
  union {
    CreateCameraRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateCameraRequestDefaultTypeInternal _CreateCameraRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DestroyCameraRequest::DestroyCameraRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camera_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DestroyCameraRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestroyCameraRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestroyCameraRequestDefaultTypeInternal() {}
  union {
    DestroyCameraRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestroyCameraRequestDefaultTypeInternal _DestroyCameraRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetResolutionRequest::SetResolutionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camera_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.width_)*/ 0u

  , /*decltype(_impl_.height_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetResolutionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetResolutionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetResolutionRequestDefaultTypeInternal() {}
  union {
    SetResolutionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetResolutionRequestDefaultTypeInternal _SetResolutionRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR ListObjectsResponse::ListObjectsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_names_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListObjectsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListObjectsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListObjectsResponseDefaultTypeInternal() {}
  union {
    ListObjectsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListObjectsResponseDefaultTypeInternal _ListObjectsResponse_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SpawnObjectRequest::SpawnObjectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.object_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.asset_path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.initial_transform_)*/nullptr} {}
struct SpawnObjectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpawnObjectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpawnObjectRequestDefaultTypeInternal() {}
  union {
    SpawnObjectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpawnObjectRequestDefaultTypeInternal _SpawnObjectRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DestroyObjectRequest::DestroyObjectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DestroyObjectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestroyObjectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestroyObjectRequestDefaultTypeInternal() {}
  union {
    DestroyObjectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestroyObjectRequestDefaultTypeInternal _DestroyObjectRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetMaterialRequest::SetMaterialRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.material_property_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetMaterialRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetMaterialRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetMaterialRequestDefaultTypeInternal() {}
  union {
    SetMaterialRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetMaterialRequestDefaultTypeInternal _SetMaterialRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SetLightingRequest::SetLightingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.light_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.transform_)*/nullptr
  , /*decltype(_impl_.intensity_)*/ 0
} {}
struct SetLightingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetLightingRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetLightingRequestDefaultTypeInternal() {}
  union {
    SetLightingRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetLightingRequestDefaultTypeInternal _SetLightingRequest_default_instance_;
}  // namespace uesynth
static ::_pb::Metadata file_level_metadata_uesynth_2eproto[22];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_uesynth_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_uesynth_2eproto = nullptr;
const ::uint32_t TableStruct_uesynth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::ActionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::uesynth::ActionRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::ActionRequest, _impl_.request_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::uesynth::ActionRequest, _impl_.action_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::FrameResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::uesynth::FrameResponse, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::FrameResponse, _impl_.request_id_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::uesynth::FrameResponse, _impl_.response_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::Vector3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::Vector3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::uesynth::Vector3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::uesynth::Vector3, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::Rotator, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::Rotator, _impl_.pitch_),
    PROTOBUF_FIELD_OFFSET(::uesynth::Rotator, _impl_.yaw_),
    PROTOBUF_FIELD_OFFSET(::uesynth::Rotator, _impl_.roll_),
    PROTOBUF_FIELD_OFFSET(::uesynth::Transform, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uesynth::Transform, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::Transform, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::uesynth::Transform, _impl_.rotation_),
    PROTOBUF_FIELD_OFFSET(::uesynth::Transform, _impl_.scale_),
    0,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::CommandResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::CommandResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::uesynth::CommandResponse, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetCameraTransformRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetCameraTransformRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::SetCameraTransformRequest, _impl_.camera_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetCameraTransformRequest, _impl_.transform_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::GetCameraTransformRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::GetCameraTransformRequest, _impl_.camera_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::GetCameraTransformResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uesynth::GetCameraTransformResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::GetCameraTransformResponse, _impl_.transform_),
    PROTOBUF_FIELD_OFFSET(::uesynth::GetCameraTransformResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::uesynth::GetCameraTransformResponse, _impl_.message_),
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::CaptureRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::CaptureRequest, _impl_.camera_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::CaptureRequest, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::uesynth::CaptureRequest, _impl_.height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::ImageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::ImageResponse, _impl_.image_data_),
    PROTOBUF_FIELD_OFFSET(::uesynth::ImageResponse, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::uesynth::ImageResponse, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::uesynth::ImageResponse, _impl_.format_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetObjectTransformRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetObjectTransformRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::SetObjectTransformRequest, _impl_.object_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetObjectTransformRequest, _impl_.transform_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::GetObjectTransformRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::GetObjectTransformRequest, _impl_.object_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::GetObjectTransformResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uesynth::GetObjectTransformResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::GetObjectTransformResponse, _impl_.transform_),
    PROTOBUF_FIELD_OFFSET(::uesynth::GetObjectTransformResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::uesynth::GetObjectTransformResponse, _impl_.message_),
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::uesynth::CreateCameraRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uesynth::CreateCameraRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::CreateCameraRequest, _impl_.camera_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::CreateCameraRequest, _impl_.initial_transform_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::DestroyCameraRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::DestroyCameraRequest, _impl_.camera_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::SetResolutionRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::SetResolutionRequest, _impl_.camera_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetResolutionRequest, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetResolutionRequest, _impl_.height_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::ListObjectsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::ListObjectsResponse, _impl_.object_names_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SpawnObjectRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SpawnObjectRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::SpawnObjectRequest, _impl_.object_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SpawnObjectRequest, _impl_.asset_path_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SpawnObjectRequest, _impl_.initial_transform_),
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::DestroyObjectRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::DestroyObjectRequest, _impl_.object_name_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::uesynth::SetMaterialRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::SetMaterialRequest, _impl_.object_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetMaterialRequest, _impl_.material_property_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetMaterialRequest, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetLightingRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetLightingRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::uesynth::SetLightingRequest, _impl_.light_name_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetLightingRequest, _impl_.intensity_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetLightingRequest, _impl_.color_),
    PROTOBUF_FIELD_OFFSET(::uesynth::SetLightingRequest, _impl_.transform_),
    ~0u,
    ~0u,
    0,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::uesynth::ActionRequest)},
        { 27, -1, -1, sizeof(::uesynth::FrameResponse)},
        { 42, -1, -1, sizeof(::uesynth::Vector3)},
        { 53, -1, -1, sizeof(::uesynth::Rotator)},
        { 64, 75, -1, sizeof(::uesynth::Transform)},
        { 78, -1, -1, sizeof(::uesynth::CommandResponse)},
        { 88, 98, -1, sizeof(::uesynth::SetCameraTransformRequest)},
        { 100, -1, -1, sizeof(::uesynth::GetCameraTransformRequest)},
        { 109, 120, -1, sizeof(::uesynth::GetCameraTransformResponse)},
        { 123, -1, -1, sizeof(::uesynth::CaptureRequest)},
        { 134, -1, -1, sizeof(::uesynth::ImageResponse)},
        { 146, 156, -1, sizeof(::uesynth::SetObjectTransformRequest)},
        { 158, -1, -1, sizeof(::uesynth::GetObjectTransformRequest)},
        { 167, 178, -1, sizeof(::uesynth::GetObjectTransformResponse)},
        { 181, 191, -1, sizeof(::uesynth::CreateCameraRequest)},
        { 193, -1, -1, sizeof(::uesynth::DestroyCameraRequest)},
        { 202, -1, -1, sizeof(::uesynth::SetResolutionRequest)},
        { 213, -1, -1, sizeof(::uesynth::ListObjectsResponse)},
        { 222, 233, -1, sizeof(::uesynth::SpawnObjectRequest)},
        { 236, -1, -1, sizeof(::uesynth::DestroyObjectRequest)},
        { 245, -1, -1, sizeof(::uesynth::SetMaterialRequest)},
        { 256, 268, -1, sizeof(::uesynth::SetLightingRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::uesynth::_ActionRequest_default_instance_._instance,
    &::uesynth::_FrameResponse_default_instance_._instance,
    &::uesynth::_Vector3_default_instance_._instance,
    &::uesynth::_Rotator_default_instance_._instance,
    &::uesynth::_Transform_default_instance_._instance,
    &::uesynth::_CommandResponse_default_instance_._instance,
    &::uesynth::_SetCameraTransformRequest_default_instance_._instance,
    &::uesynth::_GetCameraTransformRequest_default_instance_._instance,
    &::uesynth::_GetCameraTransformResponse_default_instance_._instance,
    &::uesynth::_CaptureRequest_default_instance_._instance,
    &::uesynth::_ImageResponse_default_instance_._instance,
    &::uesynth::_SetObjectTransformRequest_default_instance_._instance,
    &::uesynth::_GetObjectTransformRequest_default_instance_._instance,
    &::uesynth::_GetObjectTransformResponse_default_instance_._instance,
    &::uesynth::_CreateCameraRequest_default_instance_._instance,
    &::uesynth::_DestroyCameraRequest_default_instance_._instance,
    &::uesynth::_SetResolutionRequest_default_instance_._instance,
    &::uesynth::_ListObjectsResponse_default_instance_._instance,
    &::uesynth::_SpawnObjectRequest_default_instance_._instance,
    &::uesynth::_DestroyObjectRequest_default_instance_._instance,
    &::uesynth::_SetMaterialRequest_default_instance_._instance,
    &::uesynth::_SetLightingRequest_default_instance_._instance,
};
const char descriptor_table_protodef_uesynth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\ruesynth.proto\022\007uesynth\032\033google/protobu"
    "f/empty.proto\"\366\007\n\rActionRequest\022\022\n\nreque"
    "st_id\030\001 \001(\t\022B\n\024set_camera_transform\030\002 \001("
    "\0132\".uesynth.SetCameraTransformRequestH\000\022"
    "B\n\024get_camera_transform\030\003 \001(\0132\".uesynth."
    "GetCameraTransformRequestH\000\022.\n\013capture_r"
    "gb\030\004 \001(\0132\027.uesynth.CaptureRequestH\000\0220\n\rc"
    "apture_depth\030\005 \001(\0132\027.uesynth.CaptureRequ"
    "estH\000\0227\n\024capture_segmentation\030\006 \001(\0132\027.ue"
    "synth.CaptureRequestH\000\0222\n\017capture_normal"
    "s\030\007 \001(\0132\027.uesynth.CaptureRequestH\000\0227\n\024ca"
    "pture_optical_flow\030\010 \001(\0132\027.uesynth.Captu"
    "reRequestH\000\022B\n\024set_object_transform\030\t \001("
    "\0132\".uesynth.SetObjectTransformRequestH\000\022"
    "B\n\024get_object_transform\030\n \001(\0132\".uesynth."
    "GetObjectTransformRequestH\000\0225\n\rcreate_ca"
    "mera\030\013 \001(\0132\034.uesynth.CreateCameraRequest"
    "H\000\0227\n\016destroy_camera\030\014 \001(\0132\035.uesynth.Des"
    "troyCameraRequestH\000\0227\n\016set_resolution\030\r "
    "\001(\0132\035.uesynth.SetResolutionRequestH\000\0223\n\014"
    "spawn_object\030\016 \001(\0132\033.uesynth.SpawnObject"
    "RequestH\000\0227\n\016destroy_object\030\017 \001(\0132\035.uesy"
    "nth.DestroyObjectRequestH\000\0223\n\014set_materi"
    "al\030\020 \001(\0132\033.uesynth.SetMaterialRequestH\000\022"
    ".\n\014list_objects\030\021 \001(\0132\026.google.protobuf."
    "EmptyH\000\0223\n\014set_lighting\030\022 \001(\0132\033.uesynth."
    "SetLightingRequestH\000B\010\n\006action\"\317\002\n\rFrame"
    "Response\022\022\n\nrequest_id\030\001 \001(\t\0224\n\020command_"
    "response\030\002 \001(\0132\030.uesynth.CommandResponse"
    "H\000\022\?\n\020camera_transform\030\003 \001(\0132#.uesynth.G"
    "etCameraTransformResponseH\000\0220\n\016image_res"
    "ponse\030\004 \001(\0132\026.uesynth.ImageResponseH\000\022\?\n"
    "\020object_transform\030\005 \001(\0132#.uesynth.GetObj"
    "ectTransformResponseH\000\0224\n\014objects_list\030\006"
    " \001(\0132\034.uesynth.ListObjectsResponseH\000B\n\n\010"
    "response\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001("
    "\002\022\t\n\001z\030\003 \001(\002\"3\n\007Rotator\022\r\n\005pitch\030\001 \001(\002\022\013"
    "\n\003yaw\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\"t\n\tTransform\022\""
    "\n\010location\030\001 \001(\0132\020.uesynth.Vector3\022\"\n\010ro"
    "tation\030\002 \001(\0132\020.uesynth.Rotator\022\037\n\005scale\030"
    "\003 \001(\0132\020.uesynth.Vector3\"3\n\017CommandRespon"
    "se\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"W\n\031"
    "SetCameraTransformRequest\022\023\n\013camera_name"
    "\030\001 \001(\t\022%\n\ttransform\030\002 \001(\0132\022.uesynth.Tran"
    "sform\"0\n\031GetCameraTransformRequest\022\023\n\013ca"
    "mera_name\030\001 \001(\t\"e\n\032GetCameraTransformRes"
    "ponse\022%\n\ttransform\030\001 \001(\0132\022.uesynth.Trans"
    "form\022\017\n\007success\030\002 \001(\010\022\017\n\007message\030\003 \001(\t\"D"
    "\n\016CaptureRequest\022\023\n\013camera_name\030\001 \001(\t\022\r\n"
    "\005width\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\"R\n\rImageRes"
    "ponse\022\022\n\nimage_data\030\001 \001(\014\022\r\n\005width\030\002 \001(\r"
    "\022\016\n\006height\030\003 \001(\r\022\016\n\006format\030\004 \001(\t\"W\n\031SetO"
    "bjectTransformRequest\022\023\n\013object_name\030\001 \001"
    "(\t\022%\n\ttransform\030\002 \001(\0132\022.uesynth.Transfor"
    "m\"0\n\031GetObjectTransformRequest\022\023\n\013object"
    "_name\030\001 \001(\t\"e\n\032GetObjectTransformRespons"
    "e\022%\n\ttransform\030\001 \001(\0132\022.uesynth.Transform"
    "\022\017\n\007success\030\002 \001(\010\022\017\n\007message\030\003 \001(\t\"Y\n\023Cr"
    "eateCameraRequest\022\023\n\013camera_name\030\001 \001(\t\022-"
    "\n\021initial_transform\030\002 \001(\0132\022.uesynth.Tran"
    "sform\"+\n\024DestroyCameraRequest\022\023\n\013camera_"
    "name\030\001 \001(\t\"J\n\024SetResolutionRequest\022\023\n\013ca"
    "mera_name\030\001 \001(\t\022\r\n\005width\030\002 \001(\r\022\016\n\006height"
    "\030\003 \001(\r\"+\n\023ListObjectsResponse\022\024\n\014object_"
    "names\030\001 \003(\t\"l\n\022SpawnObjectRequest\022\023\n\013obj"
    "ect_name\030\001 \001(\t\022\022\n\nasset_path\030\002 \001(\t\022-\n\021in"
    "itial_transform\030\003 \001(\0132\022.uesynth.Transfor"
    "m\"+\n\024DestroyObjectRequest\022\023\n\013object_name"
    "\030\001 \001(\t\"S\n\022SetMaterialRequest\022\023\n\013object_n"
    "ame\030\001 \001(\t\022\031\n\021material_property\030\002 \001(\t\022\r\n\005"
    "value\030\003 \001(\t\"\203\001\n\022SetLightingRequest\022\022\n\nli"
    "ght_name\030\001 \001(\t\022\021\n\tintensity\030\002 \001(\002\022\037\n\005col"
    "or\030\003 \001(\0132\020.uesynth.Vector3\022%\n\ttransform\030"
    "\004 \001(\0132\022.uesynth.Transform2\326\n\n\016UESynthSer"
    "vice\022C\n\rControlStream\022\026.uesynth.ActionRe"
    "quest\032\026.uesynth.FrameResponse(\0010\001\022R\n\022Set"
    "CameraTransform\022\".uesynth.SetCameraTrans"
    "formRequest\032\030.uesynth.CommandResponse\022]\n"
    "\022GetCameraTransform\022\".uesynth.GetCameraT"
    "ransformRequest\032#.uesynth.GetCameraTrans"
    "formResponse\022B\n\017CaptureRgbImage\022\027.uesynt"
    "h.CaptureRequest\032\026.uesynth.ImageResponse"
    "\022B\n\017CaptureDepthMap\022\027.uesynth.CaptureReq"
    "uest\032\026.uesynth.ImageResponse\022J\n\027CaptureS"
    "egmentationMask\022\027.uesynth.CaptureRequest"
    "\032\026.uesynth.ImageResponse\022R\n\022SetObjectTra"
    "nsform\022\".uesynth.SetObjectTransformReque"
    "st\032\030.uesynth.CommandResponse\022]\n\022GetObjec"
    "tTransform\022\".uesynth.GetObjectTransformR"
    "equest\032#.uesynth.GetObjectTransformRespo"
    "nse\022F\n\014CreateCamera\022\034.uesynth.CreateCame"
    "raRequest\032\030.uesynth.CommandResponse\022H\n\rD"
    "estroyCamera\022\035.uesynth.DestroyCameraRequ"
    "est\032\030.uesynth.CommandResponse\022H\n\rSetReso"
    "lution\022\035.uesynth.SetResolutionRequest\032\030."
    "uesynth.CommandResponse\022A\n\016CaptureNormal"
    "s\022\027.uesynth.CaptureRequest\032\026.uesynth.Ima"
    "geResponse\022E\n\022CaptureOpticalFlow\022\027.uesyn"
    "th.CaptureRequest\032\026.uesynth.ImageRespons"
    "e\022D\n\013SpawnObject\022\033.uesynth.SpawnObjectRe"
    "quest\032\030.uesynth.CommandResponse\022H\n\rDestr"
    "oyObject\022\035.uesynth.DestroyObjectRequest\032"
    "\030.uesynth.CommandResponse\022D\n\013SetMaterial"
    "\022\033.uesynth.SetMaterialRequest\032\030.uesynth."
    "CommandResponse\022C\n\013ListObjects\022\026.google."
    "protobuf.Empty\032\034.uesynth.ListObjectsResp"
    "onse\022D\n\013SetLighting\022\033.uesynth.SetLightin"
    "gRequest\032\030.uesynth.CommandResponseb\006prot"
    "o3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_uesynth_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_uesynth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_uesynth_2eproto = {
    false,
    false,
    4322,
    descriptor_table_protodef_uesynth_2eproto,
    "uesynth.proto",
    &descriptor_table_uesynth_2eproto_once,
    descriptor_table_uesynth_2eproto_deps,
    1,
    22,
    schemas,
    file_default_instances,
    TableStruct_uesynth_2eproto::offsets,
    file_level_metadata_uesynth_2eproto,
    file_level_enum_descriptors_uesynth_2eproto,
    file_level_service_descriptors_uesynth_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_uesynth_2eproto_getter() {
  return &descriptor_table_uesynth_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_uesynth_2eproto(&descriptor_table_uesynth_2eproto);
namespace uesynth {
// ===================================================================

class ActionRequest::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::uesynth::ActionRequest, _impl_._oneof_case_);
  static const ::uesynth::SetCameraTransformRequest& set_camera_transform(const ActionRequest* msg);
  static const ::uesynth::GetCameraTransformRequest& get_camera_transform(const ActionRequest* msg);
  static const ::uesynth::CaptureRequest& capture_rgb(const ActionRequest* msg);
  static const ::uesynth::CaptureRequest& capture_depth(const ActionRequest* msg);
  static const ::uesynth::CaptureRequest& capture_segmentation(const ActionRequest* msg);
  static const ::uesynth::CaptureRequest& capture_normals(const ActionRequest* msg);
  static const ::uesynth::CaptureRequest& capture_optical_flow(const ActionRequest* msg);
  static const ::uesynth::SetObjectTransformRequest& set_object_transform(const ActionRequest* msg);
  static const ::uesynth::GetObjectTransformRequest& get_object_transform(const ActionRequest* msg);
  static const ::uesynth::CreateCameraRequest& create_camera(const ActionRequest* msg);
  static const ::uesynth::DestroyCameraRequest& destroy_camera(const ActionRequest* msg);
  static const ::uesynth::SetResolutionRequest& set_resolution(const ActionRequest* msg);
  static const ::uesynth::SpawnObjectRequest& spawn_object(const ActionRequest* msg);
  static const ::uesynth::DestroyObjectRequest& destroy_object(const ActionRequest* msg);
  static const ::uesynth::SetMaterialRequest& set_material(const ActionRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Empty& list_objects(const ActionRequest* msg);
  static const ::uesynth::SetLightingRequest& set_lighting(const ActionRequest* msg);
};

const ::uesynth::SetCameraTransformRequest&
ActionRequest::_Internal::set_camera_transform(const ActionRequest* msg) {
  return *msg->_impl_.action_.set_camera_transform_;
}
const ::uesynth::GetCameraTransformRequest&
ActionRequest::_Internal::get_camera_transform(const ActionRequest* msg) {
  return *msg->_impl_.action_.get_camera_transform_;
}
const ::uesynth::CaptureRequest&
ActionRequest::_Internal::capture_rgb(const ActionRequest* msg) {
  return *msg->_impl_.action_.capture_rgb_;
}
const ::uesynth::CaptureRequest&
ActionRequest::_Internal::capture_depth(const ActionRequest* msg) {
  return *msg->_impl_.action_.capture_depth_;
}
const ::uesynth::CaptureRequest&
ActionRequest::_Internal::capture_segmentation(const ActionRequest* msg) {
  return *msg->_impl_.action_.capture_segmentation_;
}
const ::uesynth::CaptureRequest&
ActionRequest::_Internal::capture_normals(const ActionRequest* msg) {
  return *msg->_impl_.action_.capture_normals_;
}
const ::uesynth::CaptureRequest&
ActionRequest::_Internal::capture_optical_flow(const ActionRequest* msg) {
  return *msg->_impl_.action_.capture_optical_flow_;
}
const ::uesynth::SetObjectTransformRequest&
ActionRequest::_Internal::set_object_transform(const ActionRequest* msg) {
  return *msg->_impl_.action_.set_object_transform_;
}
const ::uesynth::GetObjectTransformRequest&
ActionRequest::_Internal::get_object_transform(const ActionRequest* msg) {
  return *msg->_impl_.action_.get_object_transform_;
}
const ::uesynth::CreateCameraRequest&
ActionRequest::_Internal::create_camera(const ActionRequest* msg) {
  return *msg->_impl_.action_.create_camera_;
}
const ::uesynth::DestroyCameraRequest&
ActionRequest::_Internal::destroy_camera(const ActionRequest* msg) {
  return *msg->_impl_.action_.destroy_camera_;
}
const ::uesynth::SetResolutionRequest&
ActionRequest::_Internal::set_resolution(const ActionRequest* msg) {
  return *msg->_impl_.action_.set_resolution_;
}
const ::uesynth::SpawnObjectRequest&
ActionRequest::_Internal::spawn_object(const ActionRequest* msg) {
  return *msg->_impl_.action_.spawn_object_;
}
const ::uesynth::DestroyObjectRequest&
ActionRequest::_Internal::destroy_object(const ActionRequest* msg) {
  return *msg->_impl_.action_.destroy_object_;
}
const ::uesynth::SetMaterialRequest&
ActionRequest::_Internal::set_material(const ActionRequest* msg) {
  return *msg->_impl_.action_.set_material_;
}
const ::PROTOBUF_NAMESPACE_ID::Empty&
ActionRequest::_Internal::list_objects(const ActionRequest* msg) {
  return *msg->_impl_.action_.list_objects_;
}
const ::uesynth::SetLightingRequest&
ActionRequest::_Internal::set_lighting(const ActionRequest* msg) {
  return *msg->_impl_.action_.set_lighting_;
}
void ActionRequest::set_allocated_set_camera_transform(::uesynth::SetCameraTransformRequest* set_camera_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (set_camera_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_camera_transform);
    if (message_arena != submessage_arena) {
      set_camera_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_camera_transform, submessage_arena);
    }
    set_has_set_camera_transform();
    _impl_.action_.set_camera_transform_ = set_camera_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.set_camera_transform)
}
void ActionRequest::set_allocated_get_camera_transform(::uesynth::GetCameraTransformRequest* get_camera_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (get_camera_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_camera_transform);
    if (message_arena != submessage_arena) {
      get_camera_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_camera_transform, submessage_arena);
    }
    set_has_get_camera_transform();
    _impl_.action_.get_camera_transform_ = get_camera_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.get_camera_transform)
}
void ActionRequest::set_allocated_capture_rgb(::uesynth::CaptureRequest* capture_rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (capture_rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_rgb);
    if (message_arena != submessage_arena) {
      capture_rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_rgb, submessage_arena);
    }
    set_has_capture_rgb();
    _impl_.action_.capture_rgb_ = capture_rgb;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.capture_rgb)
}
void ActionRequest::set_allocated_capture_depth(::uesynth::CaptureRequest* capture_depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (capture_depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_depth);
    if (message_arena != submessage_arena) {
      capture_depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_depth, submessage_arena);
    }
    set_has_capture_depth();
    _impl_.action_.capture_depth_ = capture_depth;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.capture_depth)
}
void ActionRequest::set_allocated_capture_segmentation(::uesynth::CaptureRequest* capture_segmentation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (capture_segmentation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_segmentation);
    if (message_arena != submessage_arena) {
      capture_segmentation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_segmentation, submessage_arena);
    }
    set_has_capture_segmentation();
    _impl_.action_.capture_segmentation_ = capture_segmentation;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.capture_segmentation)
}
void ActionRequest::set_allocated_capture_normals(::uesynth::CaptureRequest* capture_normals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (capture_normals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_normals);
    if (message_arena != submessage_arena) {
      capture_normals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_normals, submessage_arena);
    }
    set_has_capture_normals();
    _impl_.action_.capture_normals_ = capture_normals;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.capture_normals)
}
void ActionRequest::set_allocated_capture_optical_flow(::uesynth::CaptureRequest* capture_optical_flow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (capture_optical_flow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capture_optical_flow);
    if (message_arena != submessage_arena) {
      capture_optical_flow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_optical_flow, submessage_arena);
    }
    set_has_capture_optical_flow();
    _impl_.action_.capture_optical_flow_ = capture_optical_flow;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.capture_optical_flow)
}
void ActionRequest::set_allocated_set_object_transform(::uesynth::SetObjectTransformRequest* set_object_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (set_object_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_object_transform);
    if (message_arena != submessage_arena) {
      set_object_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_object_transform, submessage_arena);
    }
    set_has_set_object_transform();
    _impl_.action_.set_object_transform_ = set_object_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.set_object_transform)
}
void ActionRequest::set_allocated_get_object_transform(::uesynth::GetObjectTransformRequest* get_object_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (get_object_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(get_object_transform);
    if (message_arena != submessage_arena) {
      get_object_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_object_transform, submessage_arena);
    }
    set_has_get_object_transform();
    _impl_.action_.get_object_transform_ = get_object_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.get_object_transform)
}
void ActionRequest::set_allocated_create_camera(::uesynth::CreateCameraRequest* create_camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (create_camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(create_camera);
    if (message_arena != submessage_arena) {
      create_camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_camera, submessage_arena);
    }
    set_has_create_camera();
    _impl_.action_.create_camera_ = create_camera;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.create_camera)
}
void ActionRequest::set_allocated_destroy_camera(::uesynth::DestroyCameraRequest* destroy_camera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (destroy_camera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destroy_camera);
    if (message_arena != submessage_arena) {
      destroy_camera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destroy_camera, submessage_arena);
    }
    set_has_destroy_camera();
    _impl_.action_.destroy_camera_ = destroy_camera;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.destroy_camera)
}
void ActionRequest::set_allocated_set_resolution(::uesynth::SetResolutionRequest* set_resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (set_resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_resolution);
    if (message_arena != submessage_arena) {
      set_resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_resolution, submessage_arena);
    }
    set_has_set_resolution();
    _impl_.action_.set_resolution_ = set_resolution;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.set_resolution)
}
void ActionRequest::set_allocated_spawn_object(::uesynth::SpawnObjectRequest* spawn_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (spawn_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spawn_object);
    if (message_arena != submessage_arena) {
      spawn_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spawn_object, submessage_arena);
    }
    set_has_spawn_object();
    _impl_.action_.spawn_object_ = spawn_object;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.spawn_object)
}
void ActionRequest::set_allocated_destroy_object(::uesynth::DestroyObjectRequest* destroy_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (destroy_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(destroy_object);
    if (message_arena != submessage_arena) {
      destroy_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destroy_object, submessage_arena);
    }
    set_has_destroy_object();
    _impl_.action_.destroy_object_ = destroy_object;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.destroy_object)
}
void ActionRequest::set_allocated_set_material(::uesynth::SetMaterialRequest* set_material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (set_material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_material);
    if (message_arena != submessage_arena) {
      set_material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_material, submessage_arena);
    }
    set_has_set_material();
    _impl_.action_.set_material_ = set_material;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.set_material)
}
void ActionRequest::set_allocated_list_objects(::PROTOBUF_NAMESPACE_ID::Empty* list_objects) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (list_objects) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_objects));
    if (message_arena != submessage_arena) {
      list_objects = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_objects, submessage_arena);
    }
    set_has_list_objects();
    _impl_.action_.list_objects_ = list_objects;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.list_objects)
}
void ActionRequest::clear_list_objects() {
  if (action_case() == kListObjects) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.action_.list_objects_;
    }
    clear_has_action();
  }
}
void ActionRequest::set_allocated_set_lighting(::uesynth::SetLightingRequest* set_lighting) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_action();
  if (set_lighting) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(set_lighting);
    if (message_arena != submessage_arena) {
      set_lighting = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_lighting, submessage_arena);
    }
    set_has_set_lighting();
    _impl_.action_.set_lighting_ = set_lighting;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.ActionRequest.set_lighting)
}
ActionRequest::ActionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.ActionRequest)
}
ActionRequest::ActionRequest(const ActionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ActionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_) {}

    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), _this->GetArenaForAllocation());
  }
  clear_has_action();
  switch (from.action_case()) {
    case kSetCameraTransform: {
      _this->_internal_mutable_set_camera_transform()->::uesynth::SetCameraTransformRequest::MergeFrom(
          from._internal_set_camera_transform());
      break;
    }
    case kGetCameraTransform: {
      _this->_internal_mutable_get_camera_transform()->::uesynth::GetCameraTransformRequest::MergeFrom(
          from._internal_get_camera_transform());
      break;
    }
    case kCaptureRgb: {
      _this->_internal_mutable_capture_rgb()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_rgb());
      break;
    }
    case kCaptureDepth: {
      _this->_internal_mutable_capture_depth()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_depth());
      break;
    }
    case kCaptureSegmentation: {
      _this->_internal_mutable_capture_segmentation()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_segmentation());
      break;
    }
    case kCaptureNormals: {
      _this->_internal_mutable_capture_normals()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_normals());
      break;
    }
    case kCaptureOpticalFlow: {
      _this->_internal_mutable_capture_optical_flow()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_optical_flow());
      break;
    }
    case kSetObjectTransform: {
      _this->_internal_mutable_set_object_transform()->::uesynth::SetObjectTransformRequest::MergeFrom(
          from._internal_set_object_transform());
      break;
    }
    case kGetObjectTransform: {
      _this->_internal_mutable_get_object_transform()->::uesynth::GetObjectTransformRequest::MergeFrom(
          from._internal_get_object_transform());
      break;
    }
    case kCreateCamera: {
      _this->_internal_mutable_create_camera()->::uesynth::CreateCameraRequest::MergeFrom(
          from._internal_create_camera());
      break;
    }
    case kDestroyCamera: {
      _this->_internal_mutable_destroy_camera()->::uesynth::DestroyCameraRequest::MergeFrom(
          from._internal_destroy_camera());
      break;
    }
    case kSetResolution: {
      _this->_internal_mutable_set_resolution()->::uesynth::SetResolutionRequest::MergeFrom(
          from._internal_set_resolution());
      break;
    }
    case kSpawnObject: {
      _this->_internal_mutable_spawn_object()->::uesynth::SpawnObjectRequest::MergeFrom(
          from._internal_spawn_object());
      break;
    }
    case kDestroyObject: {
      _this->_internal_mutable_destroy_object()->::uesynth::DestroyObjectRequest::MergeFrom(
          from._internal_destroy_object());
      break;
    }
    case kSetMaterial: {
      _this->_internal_mutable_set_material()->::uesynth::SetMaterialRequest::MergeFrom(
          from._internal_set_material());
      break;
    }
    case kListObjects: {
      _this->_internal_mutable_list_objects()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_list_objects());
      break;
    }
    case kSetLighting: {
      _this->_internal_mutable_set_lighting()->::uesynth::SetLightingRequest::MergeFrom(
          from._internal_set_lighting());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.ActionRequest)
}

inline void ActionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_) {}

    , decltype(_impl_.action_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_action();
}

ActionRequest::~ActionRequest() {
  // @@protoc_insertion_point(destructor:uesynth.ActionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  if (has_action()) {
    clear_action();
  }
}

void ActionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ActionRequest::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:uesynth.ActionRequest)
  switch (action_case()) {
    case kSetCameraTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.set_camera_transform_;
      }
      break;
    }
    case kGetCameraTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.get_camera_transform_;
      }
      break;
    }
    case kCaptureRgb: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.capture_rgb_;
      }
      break;
    }
    case kCaptureDepth: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.capture_depth_;
      }
      break;
    }
    case kCaptureSegmentation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.capture_segmentation_;
      }
      break;
    }
    case kCaptureNormals: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.capture_normals_;
      }
      break;
    }
    case kCaptureOpticalFlow: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.capture_optical_flow_;
      }
      break;
    }
    case kSetObjectTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.set_object_transform_;
      }
      break;
    }
    case kGetObjectTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.get_object_transform_;
      }
      break;
    }
    case kCreateCamera: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.create_camera_;
      }
      break;
    }
    case kDestroyCamera: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.destroy_camera_;
      }
      break;
    }
    case kSetResolution: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.set_resolution_;
      }
      break;
    }
    case kSpawnObject: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.spawn_object_;
      }
      break;
    }
    case kDestroyObject: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.destroy_object_;
      }
      break;
    }
    case kSetMaterial: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.set_material_;
      }
      break;
    }
    case kListObjects: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.list_objects_;
      }
      break;
    }
    case kSetLighting: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.action_.set_lighting_;
      }
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ACTION_NOT_SET;
}


void ActionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.ActionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  clear_action();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.ActionRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.SetCameraTransformRequest set_camera_transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_camera_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.GetCameraTransformRequest get_camera_transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_camera_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.CaptureRequest capture_rgb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_rgb(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.CaptureRequest capture_depth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_depth(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.CaptureRequest capture_segmentation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_segmentation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.CaptureRequest capture_normals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_normals(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.CaptureRequest capture_optical_flow = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_optical_flow(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.SetObjectTransformRequest set_object_transform = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_object_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.GetObjectTransformRequest get_object_transform = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_object_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.CreateCameraRequest create_camera = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_camera(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.DestroyCameraRequest destroy_camera = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroy_camera(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.SetResolutionRequest set_resolution = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_resolution(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.SpawnObjectRequest spawn_object = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_spawn_object(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.DestroyObjectRequest destroy_object = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_destroy_object(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.SetMaterialRequest set_material = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_material(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Empty list_objects = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_objects(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.SetLightingRequest set_lighting = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_lighting(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ActionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.ActionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    const std::string& _s = this->_internal_request_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.ActionRequest.request_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (action_case()) {
    case kSetCameraTransform: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::set_camera_transform(this),
          _Internal::set_camera_transform(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetCameraTransform: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::get_camera_transform(this),
          _Internal::get_camera_transform(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureRgb: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::capture_rgb(this),
          _Internal::capture_rgb(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureDepth: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::capture_depth(this),
          _Internal::capture_depth(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureSegmentation: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::capture_segmentation(this),
          _Internal::capture_segmentation(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureNormals: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, _Internal::capture_normals(this),
          _Internal::capture_normals(this).GetCachedSize(), target, stream);
      break;
    }
    case kCaptureOpticalFlow: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, _Internal::capture_optical_flow(this),
          _Internal::capture_optical_flow(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetObjectTransform: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::set_object_transform(this),
          _Internal::set_object_transform(this).GetCachedSize(), target, stream);
      break;
    }
    case kGetObjectTransform: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, _Internal::get_object_transform(this),
          _Internal::get_object_transform(this).GetCachedSize(), target, stream);
      break;
    }
    case kCreateCamera: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, _Internal::create_camera(this),
          _Internal::create_camera(this).GetCachedSize(), target, stream);
      break;
    }
    case kDestroyCamera: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, _Internal::destroy_camera(this),
          _Internal::destroy_camera(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetResolution: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, _Internal::set_resolution(this),
          _Internal::set_resolution(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpawnObject: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, _Internal::spawn_object(this),
          _Internal::spawn_object(this).GetCachedSize(), target, stream);
      break;
    }
    case kDestroyObject: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, _Internal::destroy_object(this),
          _Internal::destroy_object(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetMaterial: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(16, _Internal::set_material(this),
          _Internal::set_material(this).GetCachedSize(), target, stream);
      break;
    }
    case kListObjects: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, _Internal::list_objects(this),
          _Internal::list_objects(this).GetCachedSize(), target, stream);
      break;
    }
    case kSetLighting: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, _Internal::set_lighting(this),
          _Internal::set_lighting(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.ActionRequest)
  return target;
}

::size_t ActionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.ActionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_request_id());
  }

  switch (action_case()) {
    // .uesynth.SetCameraTransformRequest set_camera_transform = 2;
    case kSetCameraTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.set_camera_transform_);
      break;
    }
    // .uesynth.GetCameraTransformRequest get_camera_transform = 3;
    case kGetCameraTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.get_camera_transform_);
      break;
    }
    // .uesynth.CaptureRequest capture_rgb = 4;
    case kCaptureRgb: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.capture_rgb_);
      break;
    }
    // .uesynth.CaptureRequest capture_depth = 5;
    case kCaptureDepth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.capture_depth_);
      break;
    }
    // .uesynth.CaptureRequest capture_segmentation = 6;
    case kCaptureSegmentation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.capture_segmentation_);
      break;
    }
    // .uesynth.CaptureRequest capture_normals = 7;
    case kCaptureNormals: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.capture_normals_);
      break;
    }
    // .uesynth.CaptureRequest capture_optical_flow = 8;
    case kCaptureOpticalFlow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.capture_optical_flow_);
      break;
    }
    // .uesynth.SetObjectTransformRequest set_object_transform = 9;
    case kSetObjectTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.set_object_transform_);
      break;
    }
    // .uesynth.GetObjectTransformRequest get_object_transform = 10;
    case kGetObjectTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.get_object_transform_);
      break;
    }
    // .uesynth.CreateCameraRequest create_camera = 11;
    case kCreateCamera: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.create_camera_);
      break;
    }
    // .uesynth.DestroyCameraRequest destroy_camera = 12;
    case kDestroyCamera: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.destroy_camera_);
      break;
    }
    // .uesynth.SetResolutionRequest set_resolution = 13;
    case kSetResolution: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.set_resolution_);
      break;
    }
    // .uesynth.SpawnObjectRequest spawn_object = 14;
    case kSpawnObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.spawn_object_);
      break;
    }
    // .uesynth.DestroyObjectRequest destroy_object = 15;
    case kDestroyObject: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.destroy_object_);
      break;
    }
    // .uesynth.SetMaterialRequest set_material = 16;
    case kSetMaterial: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.set_material_);
      break;
    }
    // .google.protobuf.Empty list_objects = 17;
    case kListObjects: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.list_objects_);
      break;
    }
    // .uesynth.SetLightingRequest set_lighting = 18;
    case kSetLighting: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.action_.set_lighting_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ActionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActionRequest::GetClassData() const { return &_class_data_; }


void ActionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ActionRequest*>(&to_msg);
  auto& from = static_cast<const ActionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.ActionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  switch (from.action_case()) {
    case kSetCameraTransform: {
      _this->_internal_mutable_set_camera_transform()->::uesynth::SetCameraTransformRequest::MergeFrom(
          from._internal_set_camera_transform());
      break;
    }
    case kGetCameraTransform: {
      _this->_internal_mutable_get_camera_transform()->::uesynth::GetCameraTransformRequest::MergeFrom(
          from._internal_get_camera_transform());
      break;
    }
    case kCaptureRgb: {
      _this->_internal_mutable_capture_rgb()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_rgb());
      break;
    }
    case kCaptureDepth: {
      _this->_internal_mutable_capture_depth()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_depth());
      break;
    }
    case kCaptureSegmentation: {
      _this->_internal_mutable_capture_segmentation()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_segmentation());
      break;
    }
    case kCaptureNormals: {
      _this->_internal_mutable_capture_normals()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_normals());
      break;
    }
    case kCaptureOpticalFlow: {
      _this->_internal_mutable_capture_optical_flow()->::uesynth::CaptureRequest::MergeFrom(
          from._internal_capture_optical_flow());
      break;
    }
    case kSetObjectTransform: {
      _this->_internal_mutable_set_object_transform()->::uesynth::SetObjectTransformRequest::MergeFrom(
          from._internal_set_object_transform());
      break;
    }
    case kGetObjectTransform: {
      _this->_internal_mutable_get_object_transform()->::uesynth::GetObjectTransformRequest::MergeFrom(
          from._internal_get_object_transform());
      break;
    }
    case kCreateCamera: {
      _this->_internal_mutable_create_camera()->::uesynth::CreateCameraRequest::MergeFrom(
          from._internal_create_camera());
      break;
    }
    case kDestroyCamera: {
      _this->_internal_mutable_destroy_camera()->::uesynth::DestroyCameraRequest::MergeFrom(
          from._internal_destroy_camera());
      break;
    }
    case kSetResolution: {
      _this->_internal_mutable_set_resolution()->::uesynth::SetResolutionRequest::MergeFrom(
          from._internal_set_resolution());
      break;
    }
    case kSpawnObject: {
      _this->_internal_mutable_spawn_object()->::uesynth::SpawnObjectRequest::MergeFrom(
          from._internal_spawn_object());
      break;
    }
    case kDestroyObject: {
      _this->_internal_mutable_destroy_object()->::uesynth::DestroyObjectRequest::MergeFrom(
          from._internal_destroy_object());
      break;
    }
    case kSetMaterial: {
      _this->_internal_mutable_set_material()->::uesynth::SetMaterialRequest::MergeFrom(
          from._internal_set_material());
      break;
    }
    case kListObjects: {
      _this->_internal_mutable_list_objects()->::PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(
          from._internal_list_objects());
      break;
    }
    case kSetLighting: {
      _this->_internal_mutable_set_lighting()->::uesynth::SetLightingRequest::MergeFrom(
          from._internal_set_lighting());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActionRequest::CopyFrom(const ActionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.ActionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRequest::IsInitialized() const {
  return true;
}

void ActionRequest::InternalSwap(ActionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, lhs_arena,
                                       &other->_impl_.request_id_, rhs_arena);
  swap(_impl_.action_, other->_impl_.action_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[0]);
}
// ===================================================================

class FrameResponse::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::uesynth::FrameResponse, _impl_._oneof_case_);
  static const ::uesynth::CommandResponse& command_response(const FrameResponse* msg);
  static const ::uesynth::GetCameraTransformResponse& camera_transform(const FrameResponse* msg);
  static const ::uesynth::ImageResponse& image_response(const FrameResponse* msg);
  static const ::uesynth::GetObjectTransformResponse& object_transform(const FrameResponse* msg);
  static const ::uesynth::ListObjectsResponse& objects_list(const FrameResponse* msg);
};

const ::uesynth::CommandResponse&
FrameResponse::_Internal::command_response(const FrameResponse* msg) {
  return *msg->_impl_.response_.command_response_;
}
const ::uesynth::GetCameraTransformResponse&
FrameResponse::_Internal::camera_transform(const FrameResponse* msg) {
  return *msg->_impl_.response_.camera_transform_;
}
const ::uesynth::ImageResponse&
FrameResponse::_Internal::image_response(const FrameResponse* msg) {
  return *msg->_impl_.response_.image_response_;
}
const ::uesynth::GetObjectTransformResponse&
FrameResponse::_Internal::object_transform(const FrameResponse* msg) {
  return *msg->_impl_.response_.object_transform_;
}
const ::uesynth::ListObjectsResponse&
FrameResponse::_Internal::objects_list(const FrameResponse* msg) {
  return *msg->_impl_.response_.objects_list_;
}
void FrameResponse::set_allocated_command_response(::uesynth::CommandResponse* command_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (command_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command_response);
    if (message_arena != submessage_arena) {
      command_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command_response, submessage_arena);
    }
    set_has_command_response();
    _impl_.response_.command_response_ = command_response;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.FrameResponse.command_response)
}
void FrameResponse::set_allocated_camera_transform(::uesynth::GetCameraTransformResponse* camera_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (camera_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(camera_transform);
    if (message_arena != submessage_arena) {
      camera_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_transform, submessage_arena);
    }
    set_has_camera_transform();
    _impl_.response_.camera_transform_ = camera_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.FrameResponse.camera_transform)
}
void FrameResponse::set_allocated_image_response(::uesynth::ImageResponse* image_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (image_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image_response);
    if (message_arena != submessage_arena) {
      image_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_response, submessage_arena);
    }
    set_has_image_response();
    _impl_.response_.image_response_ = image_response;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.FrameResponse.image_response)
}
void FrameResponse::set_allocated_object_transform(::uesynth::GetObjectTransformResponse* object_transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (object_transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(object_transform);
    if (message_arena != submessage_arena) {
      object_transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_transform, submessage_arena);
    }
    set_has_object_transform();
    _impl_.response_.object_transform_ = object_transform;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.FrameResponse.object_transform)
}
void FrameResponse::set_allocated_objects_list(::uesynth::ListObjectsResponse* objects_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (objects_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(objects_list);
    if (message_arena != submessage_arena) {
      objects_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objects_list, submessage_arena);
    }
    set_has_objects_list();
    _impl_.response_.objects_list_ = objects_list;
  }
  // @@protoc_insertion_point(field_set_allocated:uesynth.FrameResponse.objects_list)
}
FrameResponse::FrameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.FrameResponse)
}
FrameResponse::FrameResponse(const FrameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FrameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_) {}

    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), _this->GetArenaForAllocation());
  }
  clear_has_response();
  switch (from.response_case()) {
    case kCommandResponse: {
      _this->_internal_mutable_command_response()->::uesynth::CommandResponse::MergeFrom(
          from._internal_command_response());
      break;
    }
    case kCameraTransform: {
      _this->_internal_mutable_camera_transform()->::uesynth::GetCameraTransformResponse::MergeFrom(
          from._internal_camera_transform());
      break;
    }
    case kImageResponse: {
      _this->_internal_mutable_image_response()->::uesynth::ImageResponse::MergeFrom(
          from._internal_image_response());
      break;
    }
    case kObjectTransform: {
      _this->_internal_mutable_object_transform()->::uesynth::GetObjectTransformResponse::MergeFrom(
          from._internal_object_transform());
      break;
    }
    case kObjectsList: {
      _this->_internal_mutable_objects_list()->::uesynth::ListObjectsResponse::MergeFrom(
          from._internal_objects_list());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.FrameResponse)
}

inline void FrameResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_) {}

    , decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_response();
}

FrameResponse::~FrameResponse() {
  // @@protoc_insertion_point(destructor:uesynth.FrameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FrameResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  if (has_response()) {
    clear_response();
  }
}

void FrameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FrameResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:uesynth.FrameResponse)
  switch (response_case()) {
    case kCommandResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.command_response_;
      }
      break;
    }
    case kCameraTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.camera_transform_;
      }
      break;
    }
    case kImageResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.image_response_;
      }
      break;
    }
    case kObjectTransform: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.object_transform_;
      }
      break;
    }
    case kObjectsList: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.objects_list_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void FrameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.FrameResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.FrameResponse.request_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.CommandResponse command_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.GetCameraTransformResponse camera_transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.ImageResponse image_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.GetObjectTransformResponse object_transform = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.ListObjectsResponse objects_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_objects_list(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* FrameResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.FrameResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    const std::string& _s = this->_internal_request_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.FrameResponse.request_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  switch (response_case()) {
    case kCommandResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::command_response(this),
          _Internal::command_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kCameraTransform: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::camera_transform(this),
          _Internal::camera_transform(this).GetCachedSize(), target, stream);
      break;
    }
    case kImageResponse: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::image_response(this),
          _Internal::image_response(this).GetCachedSize(), target, stream);
      break;
    }
    case kObjectTransform: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::object_transform(this),
          _Internal::object_transform(this).GetCachedSize(), target, stream);
      break;
    }
    case kObjectsList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::objects_list(this),
          _Internal::objects_list(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.FrameResponse)
  return target;
}

::size_t FrameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.FrameResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_request_id());
  }

  switch (response_case()) {
    // .uesynth.CommandResponse command_response = 2;
    case kCommandResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.command_response_);
      break;
    }
    // .uesynth.GetCameraTransformResponse camera_transform = 3;
    case kCameraTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.camera_transform_);
      break;
    }
    // .uesynth.ImageResponse image_response = 4;
    case kImageResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.image_response_);
      break;
    }
    // .uesynth.GetObjectTransformResponse object_transform = 5;
    case kObjectTransform: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.object_transform_);
      break;
    }
    // .uesynth.ListObjectsResponse objects_list = 6;
    case kObjectsList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.objects_list_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FrameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FrameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FrameResponse::GetClassData() const { return &_class_data_; }


void FrameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FrameResponse*>(&to_msg);
  auto& from = static_cast<const FrameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.FrameResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  switch (from.response_case()) {
    case kCommandResponse: {
      _this->_internal_mutable_command_response()->::uesynth::CommandResponse::MergeFrom(
          from._internal_command_response());
      break;
    }
    case kCameraTransform: {
      _this->_internal_mutable_camera_transform()->::uesynth::GetCameraTransformResponse::MergeFrom(
          from._internal_camera_transform());
      break;
    }
    case kImageResponse: {
      _this->_internal_mutable_image_response()->::uesynth::ImageResponse::MergeFrom(
          from._internal_image_response());
      break;
    }
    case kObjectTransform: {
      _this->_internal_mutable_object_transform()->::uesynth::GetObjectTransformResponse::MergeFrom(
          from._internal_object_transform());
      break;
    }
    case kObjectsList: {
      _this->_internal_mutable_objects_list()->::uesynth::ListObjectsResponse::MergeFrom(
          from._internal_objects_list());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FrameResponse::CopyFrom(const FrameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.FrameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameResponse::IsInitialized() const {
  return true;
}

void FrameResponse::InternalSwap(FrameResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, lhs_arena,
                                       &other->_impl_.request_id_, rhs_arena);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[1]);
}
// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uesynth.Vector3)
}

inline void Vector3::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.x_) { 0 }

    , decltype(_impl_.y_) { 0 }

    , decltype(_impl_.z_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:uesynth.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.Vector3)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Vector3::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.Vector3)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.Vector3)
  return target;
}

::size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.Vector3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }


void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.Vector3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[2]);
}
// ===================================================================

class Rotator::_Internal {
 public:
};

Rotator::Rotator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.Rotator)
}
Rotator::Rotator(const Rotator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uesynth.Rotator)
}

inline void Rotator::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pitch_) { 0 }

    , decltype(_impl_.yaw_) { 0 }

    , decltype(_impl_.roll_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rotator::~Rotator() {
  // @@protoc_insertion_point(destructor:uesynth.Rotator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rotator::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rotator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rotator::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.Rotator)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pitch_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rotator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 13)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // float roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 29)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Rotator::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.Rotator)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_pitch(), target);
  }

  // float yaw = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_yaw(), target);
  }

  // float roll = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.Rotator)
  return target;
}

::size_t Rotator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.Rotator)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pitch = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 5;
  }

  // float yaw = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 5;
  }

  // float roll = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rotator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rotator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rotator::GetClassData() const { return &_class_data_; }


void Rotator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rotator*>(&to_msg);
  auto& from = static_cast<const Rotator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.Rotator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rotator::CopyFrom(const Rotator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.Rotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotator::IsInitialized() const {
  return true;
}

void Rotator::InternalSwap(Rotator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotator, _impl_.roll_)
      + sizeof(Rotator::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(Rotator, _impl_.pitch_)>(
          reinterpret_cast<char*>(&_impl_.pitch_),
          reinterpret_cast<char*>(&other->_impl_.pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rotator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[3]);
}
// ===================================================================

class Transform::_Internal {
 public:
  using HasBits = decltype(std::declval<Transform>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_);
  static const ::uesynth::Vector3& location(const Transform* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::uesynth::Rotator& rotation(const Transform* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::uesynth::Vector3& scale(const Transform* msg);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::uesynth::Vector3&
Transform::_Internal::location(const Transform* msg) {
  return *msg->_impl_.location_;
}
const ::uesynth::Rotator&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->_impl_.rotation_;
}
const ::uesynth::Vector3&
Transform::_Internal::scale(const Transform* msg) {
  return *msg->_impl_.scale_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Transform* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.scale_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.location_ = new ::uesynth::Vector3(*from._impl_.location_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.rotation_ = new ::uesynth::Rotator(*from._impl_.rotation_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.scale_ = new ::uesynth::Vector3(*from._impl_.scale_);
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.Transform)
}

inline void Transform::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.location_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.scale_){nullptr}
  };
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:uesynth.Transform)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transform::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.location_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
  if (this != internal_default_instance()) delete _impl_.scale_;
}

void Transform::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.Transform)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.location_ != nullptr);
      _impl_.location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.scale_ != nullptr);
      _impl_.scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uesynth.Vector3 location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.Rotator rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.Vector3 scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Transform::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.Transform)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .uesynth.Vector3 location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // .uesynth.Rotator rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // .uesynth.Vector3 scale = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.Transform)
  return target;
}

::size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.Transform)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .uesynth.Vector3 location = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.location_);
    }

    // .uesynth.Rotator rotation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rotation_);
    }

    // .uesynth.Vector3 scale = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.scale_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Transform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transform::GetClassData() const { return &_class_data_; }


void Transform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Transform*>(&to_msg);
  auto& from = static_cast<const Transform&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.Transform)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_location()->::uesynth::Vector3::MergeFrom(
          from._internal_location());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rotation()->::uesynth::Rotator::MergeFrom(
          from._internal_rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_scale()->::uesynth::Vector3::MergeFrom(
          from._internal_scale());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, _impl_.scale_)
      + sizeof(Transform::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(Transform, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[4]);
}
// ===================================================================

class CommandResponse::_Internal {
 public:
};

CommandResponse::CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.CommandResponse)
}
CommandResponse::CommandResponse(const CommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.success_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:uesynth.CommandResponse)
}

inline void CommandResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.message_) {}

    , decltype(_impl_.success_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandResponse::~CommandResponse() {
  // @@protoc_insertion_point(destructor:uesynth.CommandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void CommandResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.CommandResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.CommandResponse.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CommandResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.CommandResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.CommandResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.CommandResponse)
  return target;
}

::size_t CommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.CommandResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandResponse::GetClassData() const { return &_class_data_; }


void CommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandResponse*>(&to_msg);
  auto& from = static_cast<const CommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.CommandResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandResponse::CopyFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponse::IsInitialized() const {
  return true;
}

void CommandResponse::InternalSwap(CommandResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);

  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[5]);
}
// ===================================================================

class SetCameraTransformRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetCameraTransformRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetCameraTransformRequest, _impl_._has_bits_);
  static const ::uesynth::Transform& transform(const SetCameraTransformRequest* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uesynth::Transform&
SetCameraTransformRequest::_Internal::transform(const SetCameraTransformRequest* msg) {
  return *msg->_impl_.transform_;
}
SetCameraTransformRequest::SetCameraTransformRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.SetCameraTransformRequest)
}
SetCameraTransformRequest::SetCameraTransformRequest(const SetCameraTransformRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetCameraTransformRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_name_) {}

    , decltype(_impl_.transform_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    _this->_impl_.camera_name_.Set(from._internal_camera_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transform_ = new ::uesynth::Transform(*from._impl_.transform_);
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.SetCameraTransformRequest)
}

inline void SetCameraTransformRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_name_) {}

    , decltype(_impl_.transform_){nullptr}
  };
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetCameraTransformRequest::~SetCameraTransformRequest() {
  // @@protoc_insertion_point(destructor:uesynth.SetCameraTransformRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetCameraTransformRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void SetCameraTransformRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetCameraTransformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.SetCameraTransformRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCameraTransformRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string camera_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SetCameraTransformRequest.camera_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.Transform transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetCameraTransformRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.SetCameraTransformRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    const std::string& _s = this->_internal_camera_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SetCameraTransformRequest.camera_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .uesynth.Transform transform = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.SetCameraTransformRequest)
  return target;
}

::size_t SetCameraTransformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.SetCameraTransformRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_camera_name());
  }

  // .uesynth.Transform transform = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetCameraTransformRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetCameraTransformRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetCameraTransformRequest::GetClassData() const { return &_class_data_; }


void SetCameraTransformRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetCameraTransformRequest*>(&to_msg);
  auto& from = static_cast<const SetCameraTransformRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.SetCameraTransformRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_camera_name().empty()) {
    _this->_internal_set_camera_name(from._internal_camera_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transform()->::uesynth::Transform::MergeFrom(
        from._internal_transform());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetCameraTransformRequest::CopyFrom(const SetCameraTransformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.SetCameraTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCameraTransformRequest::IsInitialized() const {
  return true;
}

void SetCameraTransformRequest::InternalSwap(SetCameraTransformRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.camera_name_, lhs_arena,
                                       &other->_impl_.camera_name_, rhs_arena);
  swap(_impl_.transform_, other->_impl_.transform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCameraTransformRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[6]);
}
// ===================================================================

class GetCameraTransformRequest::_Internal {
 public:
};

GetCameraTransformRequest::GetCameraTransformRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.GetCameraTransformRequest)
}
GetCameraTransformRequest::GetCameraTransformRequest(const GetCameraTransformRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCameraTransformRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    _this->_impl_.camera_name_.Set(from._internal_camera_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.GetCameraTransformRequest)
}

inline void GetCameraTransformRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCameraTransformRequest::~GetCameraTransformRequest() {
  // @@protoc_insertion_point(destructor:uesynth.GetCameraTransformRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCameraTransformRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_name_.Destroy();
}

void GetCameraTransformRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCameraTransformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.GetCameraTransformRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCameraTransformRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string camera_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.GetCameraTransformRequest.camera_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetCameraTransformRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.GetCameraTransformRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    const std::string& _s = this->_internal_camera_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.GetCameraTransformRequest.camera_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.GetCameraTransformRequest)
  return target;
}

::size_t GetCameraTransformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.GetCameraTransformRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_camera_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCameraTransformRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCameraTransformRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCameraTransformRequest::GetClassData() const { return &_class_data_; }


void GetCameraTransformRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCameraTransformRequest*>(&to_msg);
  auto& from = static_cast<const GetCameraTransformRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.GetCameraTransformRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_camera_name().empty()) {
    _this->_internal_set_camera_name(from._internal_camera_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCameraTransformRequest::CopyFrom(const GetCameraTransformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.GetCameraTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCameraTransformRequest::IsInitialized() const {
  return true;
}

void GetCameraTransformRequest::InternalSwap(GetCameraTransformRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.camera_name_, lhs_arena,
                                       &other->_impl_.camera_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCameraTransformRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[7]);
}
// ===================================================================

class GetCameraTransformResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCameraTransformResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetCameraTransformResponse, _impl_._has_bits_);
  static const ::uesynth::Transform& transform(const GetCameraTransformResponse* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uesynth::Transform&
GetCameraTransformResponse::_Internal::transform(const GetCameraTransformResponse* msg) {
  return *msg->_impl_.transform_;
}
GetCameraTransformResponse::GetCameraTransformResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.GetCameraTransformResponse)
}
GetCameraTransformResponse::GetCameraTransformResponse(const GetCameraTransformResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetCameraTransformResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.success_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transform_ = new ::uesynth::Transform(*from._impl_.transform_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:uesynth.GetCameraTransformResponse)
}

inline void GetCameraTransformResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.success_) { false }

  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCameraTransformResponse::~GetCameraTransformResponse() {
  // @@protoc_insertion_point(destructor:uesynth.GetCameraTransformResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCameraTransformResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void GetCameraTransformResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCameraTransformResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.GetCameraTransformResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCameraTransformResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uesynth.Transform transform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.GetCameraTransformResponse.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetCameraTransformResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.GetCameraTransformResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .uesynth.Transform transform = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_success(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.GetCameraTransformResponse.message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.GetCameraTransformResponse)
  return target;
}

::size_t GetCameraTransformResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.GetCameraTransformResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .uesynth.Transform transform = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCameraTransformResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetCameraTransformResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCameraTransformResponse::GetClassData() const { return &_class_data_; }


void GetCameraTransformResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetCameraTransformResponse*>(&to_msg);
  auto& from = static_cast<const GetCameraTransformResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.GetCameraTransformResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transform()->::uesynth::Transform::MergeFrom(
        from._internal_transform());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCameraTransformResponse::CopyFrom(const GetCameraTransformResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.GetCameraTransformResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCameraTransformResponse::IsInitialized() const {
  return true;
}

void GetCameraTransformResponse::InternalSwap(GetCameraTransformResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCameraTransformResponse, _impl_.success_)
      + sizeof(GetCameraTransformResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetCameraTransformResponse, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCameraTransformResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[8]);
}
// ===================================================================

class CaptureRequest::_Internal {
 public:
};

CaptureRequest::CaptureRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.CaptureRequest)
}
CaptureRequest::CaptureRequest(const CaptureRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CaptureRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_name_) {}

    , decltype(_impl_.width_) {}

    , decltype(_impl_.height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    _this->_impl_.camera_name_.Set(from._internal_camera_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:uesynth.CaptureRequest)
}

inline void CaptureRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_name_) {}

    , decltype(_impl_.width_) { 0u }

    , decltype(_impl_.height_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CaptureRequest::~CaptureRequest() {
  // @@protoc_insertion_point(destructor:uesynth.CaptureRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CaptureRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_name_.Destroy();
}

void CaptureRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CaptureRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.CaptureRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_name_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CaptureRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string camera_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.CaptureRequest.camera_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CaptureRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.CaptureRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    const std::string& _s = this->_internal_camera_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.CaptureRequest.camera_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.CaptureRequest)
  return target;
}

::size_t CaptureRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.CaptureRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_camera_name());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CaptureRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CaptureRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CaptureRequest::GetClassData() const { return &_class_data_; }


void CaptureRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CaptureRequest*>(&to_msg);
  auto& from = static_cast<const CaptureRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.CaptureRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_camera_name().empty()) {
    _this->_internal_set_camera_name(from._internal_camera_name());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CaptureRequest::CopyFrom(const CaptureRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.CaptureRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaptureRequest::IsInitialized() const {
  return true;
}

void CaptureRequest::InternalSwap(CaptureRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.camera_name_, lhs_arena,
                                       &other->_impl_.camera_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CaptureRequest, _impl_.height_)
      + sizeof(CaptureRequest::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(CaptureRequest, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CaptureRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[9]);
}
// ===================================================================

class ImageResponse::_Internal {
 public:
};

ImageResponse::ImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.ImageResponse)
}
ImageResponse::ImageResponse(const ImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_data_) {}

    , decltype(_impl_.format_) {}

    , decltype(_impl_.width_) {}

    , decltype(_impl_.height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_data().empty()) {
    _this->_impl_.image_data_.Set(from._internal_image_data(), _this->GetArenaForAllocation());
  }
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    _this->_impl_.format_.Set(from._internal_format(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:uesynth.ImageResponse)
}

inline void ImageResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.image_data_) {}

    , decltype(_impl_.format_) {}

    , decltype(_impl_.width_) { 0u }

    , decltype(_impl_.height_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.format_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageResponse::~ImageResponse() {
  // @@protoc_insertion_point(destructor:uesynth.ImageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_data_.Destroy();
  _impl_.format_.Destroy();
}

void ImageResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.ImageResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_data_.ClearToEmpty();
  _impl_.format_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes image_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.ImageResponse.format"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ImageResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.ImageResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image_data = 1;
  if (!this->_internal_image_data().empty()) {
    const std::string& _s = this->_internal_image_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  // string format = 4;
  if (!this->_internal_format().empty()) {
    const std::string& _s = this->_internal_format();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.ImageResponse.format");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.ImageResponse)
  return target;
}

::size_t ImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.ImageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image_data = 1;
  if (!this->_internal_image_data().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_image_data());
  }

  // string format = 4;
  if (!this->_internal_format().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_format());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageResponse::GetClassData() const { return &_class_data_; }


void ImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageResponse*>(&to_msg);
  auto& from = static_cast<const ImageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.ImageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image_data().empty()) {
    _this->_internal_set_image_data(from._internal_image_data());
  }
  if (!from._internal_format().empty()) {
    _this->_internal_set_format(from._internal_format());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageResponse::CopyFrom(const ImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.ImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageResponse::IsInitialized() const {
  return true;
}

void ImageResponse::InternalSwap(ImageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_data_, lhs_arena,
                                       &other->_impl_.image_data_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.format_, lhs_arena,
                                       &other->_impl_.format_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.height_)
      + sizeof(ImageResponse::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(ImageResponse, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[10]);
}
// ===================================================================

class SetObjectTransformRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetObjectTransformRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetObjectTransformRequest, _impl_._has_bits_);
  static const ::uesynth::Transform& transform(const SetObjectTransformRequest* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uesynth::Transform&
SetObjectTransformRequest::_Internal::transform(const SetObjectTransformRequest* msg) {
  return *msg->_impl_.transform_;
}
SetObjectTransformRequest::SetObjectTransformRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.SetObjectTransformRequest)
}
SetObjectTransformRequest::SetObjectTransformRequest(const SetObjectTransformRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetObjectTransformRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_name_) {}

    , decltype(_impl_.transform_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_name().empty()) {
    _this->_impl_.object_name_.Set(from._internal_object_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transform_ = new ::uesynth::Transform(*from._impl_.transform_);
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.SetObjectTransformRequest)
}

inline void SetObjectTransformRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_name_) {}

    , decltype(_impl_.transform_){nullptr}
  };
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetObjectTransformRequest::~SetObjectTransformRequest() {
  // @@protoc_insertion_point(destructor:uesynth.SetObjectTransformRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetObjectTransformRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void SetObjectTransformRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetObjectTransformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.SetObjectTransformRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetObjectTransformRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SetObjectTransformRequest.object_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.Transform transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetObjectTransformRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.SetObjectTransformRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    const std::string& _s = this->_internal_object_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SetObjectTransformRequest.object_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .uesynth.Transform transform = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.SetObjectTransformRequest)
  return target;
}

::size_t SetObjectTransformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.SetObjectTransformRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_object_name());
  }

  // .uesynth.Transform transform = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetObjectTransformRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetObjectTransformRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetObjectTransformRequest::GetClassData() const { return &_class_data_; }


void SetObjectTransformRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetObjectTransformRequest*>(&to_msg);
  auto& from = static_cast<const SetObjectTransformRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.SetObjectTransformRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_name().empty()) {
    _this->_internal_set_object_name(from._internal_object_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transform()->::uesynth::Transform::MergeFrom(
        from._internal_transform());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetObjectTransformRequest::CopyFrom(const SetObjectTransformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.SetObjectTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetObjectTransformRequest::IsInitialized() const {
  return true;
}

void SetObjectTransformRequest::InternalSwap(SetObjectTransformRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_name_, lhs_arena,
                                       &other->_impl_.object_name_, rhs_arena);
  swap(_impl_.transform_, other->_impl_.transform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetObjectTransformRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[11]);
}
// ===================================================================

class GetObjectTransformRequest::_Internal {
 public:
};

GetObjectTransformRequest::GetObjectTransformRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.GetObjectTransformRequest)
}
GetObjectTransformRequest::GetObjectTransformRequest(const GetObjectTransformRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetObjectTransformRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_name().empty()) {
    _this->_impl_.object_name_.Set(from._internal_object_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.GetObjectTransformRequest)
}

inline void GetObjectTransformRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.object_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetObjectTransformRequest::~GetObjectTransformRequest() {
  // @@protoc_insertion_point(destructor:uesynth.GetObjectTransformRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetObjectTransformRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_name_.Destroy();
}

void GetObjectTransformRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetObjectTransformRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.GetObjectTransformRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetObjectTransformRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.GetObjectTransformRequest.object_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetObjectTransformRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.GetObjectTransformRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    const std::string& _s = this->_internal_object_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.GetObjectTransformRequest.object_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.GetObjectTransformRequest)
  return target;
}

::size_t GetObjectTransformRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.GetObjectTransformRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_object_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetObjectTransformRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetObjectTransformRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetObjectTransformRequest::GetClassData() const { return &_class_data_; }


void GetObjectTransformRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetObjectTransformRequest*>(&to_msg);
  auto& from = static_cast<const GetObjectTransformRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.GetObjectTransformRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_name().empty()) {
    _this->_internal_set_object_name(from._internal_object_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetObjectTransformRequest::CopyFrom(const GetObjectTransformRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.GetObjectTransformRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectTransformRequest::IsInitialized() const {
  return true;
}

void GetObjectTransformRequest::InternalSwap(GetObjectTransformRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_name_, lhs_arena,
                                       &other->_impl_.object_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetObjectTransformRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[12]);
}
// ===================================================================

class GetObjectTransformResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetObjectTransformResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetObjectTransformResponse, _impl_._has_bits_);
  static const ::uesynth::Transform& transform(const GetObjectTransformResponse* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uesynth::Transform&
GetObjectTransformResponse::_Internal::transform(const GetObjectTransformResponse* msg) {
  return *msg->_impl_.transform_;
}
GetObjectTransformResponse::GetObjectTransformResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.GetObjectTransformResponse)
}
GetObjectTransformResponse::GetObjectTransformResponse(const GetObjectTransformResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetObjectTransformResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.success_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.transform_ = new ::uesynth::Transform(*from._impl_.transform_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:uesynth.GetObjectTransformResponse)
}

inline void GetObjectTransformResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.success_) { false }

  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetObjectTransformResponse::~GetObjectTransformResponse() {
  // @@protoc_insertion_point(destructor:uesynth.GetObjectTransformResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetObjectTransformResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void GetObjectTransformResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetObjectTransformResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.GetObjectTransformResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetObjectTransformResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .uesynth.Transform transform = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.GetObjectTransformResponse.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetObjectTransformResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.GetObjectTransformResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .uesynth.Transform transform = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_success(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.GetObjectTransformResponse.message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.GetObjectTransformResponse)
  return target;
}

::size_t GetObjectTransformResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.GetObjectTransformResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .uesynth.Transform transform = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transform_);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetObjectTransformResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetObjectTransformResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetObjectTransformResponse::GetClassData() const { return &_class_data_; }


void GetObjectTransformResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetObjectTransformResponse*>(&to_msg);
  auto& from = static_cast<const GetObjectTransformResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.GetObjectTransformResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transform()->::uesynth::Transform::MergeFrom(
        from._internal_transform());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetObjectTransformResponse::CopyFrom(const GetObjectTransformResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.GetObjectTransformResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetObjectTransformResponse::IsInitialized() const {
  return true;
}

void GetObjectTransformResponse::InternalSwap(GetObjectTransformResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetObjectTransformResponse, _impl_.success_)
      + sizeof(GetObjectTransformResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GetObjectTransformResponse, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetObjectTransformResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[13]);
}
// ===================================================================

class CreateCameraRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateCameraRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CreateCameraRequest, _impl_._has_bits_);
  static const ::uesynth::Transform& initial_transform(const CreateCameraRequest* msg);
  static void set_has_initial_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uesynth::Transform&
CreateCameraRequest::_Internal::initial_transform(const CreateCameraRequest* msg) {
  return *msg->_impl_.initial_transform_;
}
CreateCameraRequest::CreateCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.CreateCameraRequest)
}
CreateCameraRequest::CreateCameraRequest(const CreateCameraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateCameraRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_name_) {}

    , decltype(_impl_.initial_transform_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    _this->_impl_.camera_name_.Set(from._internal_camera_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.initial_transform_ = new ::uesynth::Transform(*from._impl_.initial_transform_);
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.CreateCameraRequest)
}

inline void CreateCameraRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_name_) {}

    , decltype(_impl_.initial_transform_){nullptr}
  };
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateCameraRequest::~CreateCameraRequest() {
  // @@protoc_insertion_point(destructor:uesynth.CreateCameraRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateCameraRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.initial_transform_;
}

void CreateCameraRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateCameraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.CreateCameraRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.initial_transform_ != nullptr);
    _impl_.initial_transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCameraRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string camera_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.CreateCameraRequest.camera_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.Transform initial_transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateCameraRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.CreateCameraRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    const std::string& _s = this->_internal_camera_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.CreateCameraRequest.camera_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .uesynth.Transform initial_transform = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::initial_transform(this),
        _Internal::initial_transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.CreateCameraRequest)
  return target;
}

::size_t CreateCameraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.CreateCameraRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_camera_name());
  }

  // .uesynth.Transform initial_transform = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_transform_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCameraRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateCameraRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCameraRequest::GetClassData() const { return &_class_data_; }


void CreateCameraRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateCameraRequest*>(&to_msg);
  auto& from = static_cast<const CreateCameraRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.CreateCameraRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_camera_name().empty()) {
    _this->_internal_set_camera_name(from._internal_camera_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_initial_transform()->::uesynth::Transform::MergeFrom(
        from._internal_initial_transform());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCameraRequest::CopyFrom(const CreateCameraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.CreateCameraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCameraRequest::IsInitialized() const {
  return true;
}

void CreateCameraRequest::InternalSwap(CreateCameraRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.camera_name_, lhs_arena,
                                       &other->_impl_.camera_name_, rhs_arena);
  swap(_impl_.initial_transform_, other->_impl_.initial_transform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCameraRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[14]);
}
// ===================================================================

class DestroyCameraRequest::_Internal {
 public:
};

DestroyCameraRequest::DestroyCameraRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.DestroyCameraRequest)
}
DestroyCameraRequest::DestroyCameraRequest(const DestroyCameraRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DestroyCameraRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    _this->_impl_.camera_name_.Set(from._internal_camera_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.DestroyCameraRequest)
}

inline void DestroyCameraRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DestroyCameraRequest::~DestroyCameraRequest() {
  // @@protoc_insertion_point(destructor:uesynth.DestroyCameraRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestroyCameraRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_name_.Destroy();
}

void DestroyCameraRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestroyCameraRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.DestroyCameraRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyCameraRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string camera_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.DestroyCameraRequest.camera_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DestroyCameraRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.DestroyCameraRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    const std::string& _s = this->_internal_camera_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.DestroyCameraRequest.camera_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.DestroyCameraRequest)
  return target;
}

::size_t DestroyCameraRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.DestroyCameraRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_camera_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestroyCameraRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DestroyCameraRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestroyCameraRequest::GetClassData() const { return &_class_data_; }


void DestroyCameraRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DestroyCameraRequest*>(&to_msg);
  auto& from = static_cast<const DestroyCameraRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.DestroyCameraRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_camera_name().empty()) {
    _this->_internal_set_camera_name(from._internal_camera_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestroyCameraRequest::CopyFrom(const DestroyCameraRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.DestroyCameraRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyCameraRequest::IsInitialized() const {
  return true;
}

void DestroyCameraRequest::InternalSwap(DestroyCameraRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.camera_name_, lhs_arena,
                                       &other->_impl_.camera_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyCameraRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[15]);
}
// ===================================================================

class SetResolutionRequest::_Internal {
 public:
};

SetResolutionRequest::SetResolutionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.SetResolutionRequest)
}
SetResolutionRequest::SetResolutionRequest(const SetResolutionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetResolutionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_name_) {}

    , decltype(_impl_.width_) {}

    , decltype(_impl_.height_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_camera_name().empty()) {
    _this->_impl_.camera_name_.Set(from._internal_camera_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:uesynth.SetResolutionRequest)
}

inline void SetResolutionRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.camera_name_) {}

    , decltype(_impl_.width_) { 0u }

    , decltype(_impl_.height_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.camera_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.camera_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetResolutionRequest::~SetResolutionRequest() {
  // @@protoc_insertion_point(destructor:uesynth.SetResolutionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetResolutionRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camera_name_.Destroy();
}

void SetResolutionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetResolutionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.SetResolutionRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camera_name_.ClearToEmpty();
  ::memset(&_impl_.width_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetResolutionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string camera_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_camera_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SetResolutionRequest.camera_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetResolutionRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.SetResolutionRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    const std::string& _s = this->_internal_camera_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SetResolutionRequest.camera_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_width(), target);
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.SetResolutionRequest)
  return target;
}

::size_t SetResolutionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.SetResolutionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_name = 1;
  if (!this->_internal_camera_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_camera_name());
  }

  // uint32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_width());
  }

  // uint32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetResolutionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetResolutionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetResolutionRequest::GetClassData() const { return &_class_data_; }


void SetResolutionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetResolutionRequest*>(&to_msg);
  auto& from = static_cast<const SetResolutionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.SetResolutionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_camera_name().empty()) {
    _this->_internal_set_camera_name(from._internal_camera_name());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetResolutionRequest::CopyFrom(const SetResolutionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.SetResolutionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetResolutionRequest::IsInitialized() const {
  return true;
}

void SetResolutionRequest::InternalSwap(SetResolutionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.camera_name_, lhs_arena,
                                       &other->_impl_.camera_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetResolutionRequest, _impl_.height_)
      + sizeof(SetResolutionRequest::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SetResolutionRequest, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetResolutionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[16]);
}
// ===================================================================

class ListObjectsResponse::_Internal {
 public:
};

ListObjectsResponse::ListObjectsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.ListObjectsResponse)
}
ListObjectsResponse::ListObjectsResponse(const ListObjectsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListObjectsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_names_){from._impl_.object_names_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:uesynth.ListObjectsResponse)
}

inline void ListObjectsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.object_names_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListObjectsResponse::~ListObjectsResponse() {
  // @@protoc_insertion_point(destructor:uesynth.ListObjectsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListObjectsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_object_names()->~RepeatedPtrField();
}

void ListObjectsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListObjectsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.ListObjectsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_object_names()->Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListObjectsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string object_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_object_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "uesynth.ListObjectsResponse.object_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListObjectsResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.ListObjectsResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string object_names = 1;
  for (int i = 0, n = this->_internal_object_names_size(); i < n; ++i) {
    const auto& s = this->_internal_object_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.ListObjectsResponse.object_names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.ListObjectsResponse)
  return target;
}

::size_t ListObjectsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.ListObjectsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string object_names = 1;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_object_names().size());
  for (int i = 0, n = _internal_object_names().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_object_names().Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListObjectsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListObjectsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListObjectsResponse::GetClassData() const { return &_class_data_; }


void ListObjectsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListObjectsResponse*>(&to_msg);
  auto& from = static_cast<const ListObjectsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.ListObjectsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_object_names()->MergeFrom(from._internal_object_names());
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListObjectsResponse::CopyFrom(const ListObjectsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.ListObjectsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListObjectsResponse::IsInitialized() const {
  return true;
}

void ListObjectsResponse::InternalSwap(ListObjectsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_object_names()->InternalSwap(
      other->_internal_mutable_object_names());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListObjectsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[17]);
}
// ===================================================================

class SpawnObjectRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SpawnObjectRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SpawnObjectRequest, _impl_._has_bits_);
  static const ::uesynth::Transform& initial_transform(const SpawnObjectRequest* msg);
  static void set_has_initial_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::uesynth::Transform&
SpawnObjectRequest::_Internal::initial_transform(const SpawnObjectRequest* msg) {
  return *msg->_impl_.initial_transform_;
}
SpawnObjectRequest::SpawnObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.SpawnObjectRequest)
}
SpawnObjectRequest::SpawnObjectRequest(const SpawnObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpawnObjectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_name_) {}

    , decltype(_impl_.asset_path_) {}

    , decltype(_impl_.initial_transform_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_name().empty()) {
    _this->_impl_.object_name_.Set(from._internal_object_name(), _this->GetArenaForAllocation());
  }
  _impl_.asset_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.asset_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset_path().empty()) {
    _this->_impl_.asset_path_.Set(from._internal_asset_path(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.initial_transform_ = new ::uesynth::Transform(*from._impl_.initial_transform_);
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.SpawnObjectRequest)
}

inline void SpawnObjectRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.object_name_) {}

    , decltype(_impl_.asset_path_) {}

    , decltype(_impl_.initial_transform_){nullptr}
  };
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.asset_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.asset_path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpawnObjectRequest::~SpawnObjectRequest() {
  // @@protoc_insertion_point(destructor:uesynth.SpawnObjectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpawnObjectRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_name_.Destroy();
  _impl_.asset_path_.Destroy();
  if (this != internal_default_instance()) delete _impl_.initial_transform_;
}

void SpawnObjectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpawnObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.SpawnObjectRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_name_.ClearToEmpty();
  _impl_.asset_path_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.initial_transform_ != nullptr);
    _impl_.initial_transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpawnObjectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SpawnObjectRequest.object_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string asset_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_asset_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SpawnObjectRequest.asset_path"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.Transform initial_transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpawnObjectRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.SpawnObjectRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    const std::string& _s = this->_internal_object_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SpawnObjectRequest.object_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string asset_path = 2;
  if (!this->_internal_asset_path().empty()) {
    const std::string& _s = this->_internal_asset_path();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SpawnObjectRequest.asset_path");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .uesynth.Transform initial_transform = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::initial_transform(this),
        _Internal::initial_transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.SpawnObjectRequest)
  return target;
}

::size_t SpawnObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.SpawnObjectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_object_name());
  }

  // string asset_path = 2;
  if (!this->_internal_asset_path().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_asset_path());
  }

  // .uesynth.Transform initial_transform = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.initial_transform_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpawnObjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpawnObjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpawnObjectRequest::GetClassData() const { return &_class_data_; }


void SpawnObjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpawnObjectRequest*>(&to_msg);
  auto& from = static_cast<const SpawnObjectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.SpawnObjectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_name().empty()) {
    _this->_internal_set_object_name(from._internal_object_name());
  }
  if (!from._internal_asset_path().empty()) {
    _this->_internal_set_asset_path(from._internal_asset_path());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_initial_transform()->::uesynth::Transform::MergeFrom(
        from._internal_initial_transform());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpawnObjectRequest::CopyFrom(const SpawnObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.SpawnObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnObjectRequest::IsInitialized() const {
  return true;
}

void SpawnObjectRequest::InternalSwap(SpawnObjectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_name_, lhs_arena,
                                       &other->_impl_.object_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_path_, lhs_arena,
                                       &other->_impl_.asset_path_, rhs_arena);
  swap(_impl_.initial_transform_, other->_impl_.initial_transform_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpawnObjectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[18]);
}
// ===================================================================

class DestroyObjectRequest::_Internal {
 public:
};

DestroyObjectRequest::DestroyObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.DestroyObjectRequest)
}
DestroyObjectRequest::DestroyObjectRequest(const DestroyObjectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DestroyObjectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_name().empty()) {
    _this->_impl_.object_name_.Set(from._internal_object_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.DestroyObjectRequest)
}

inline void DestroyObjectRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.object_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DestroyObjectRequest::~DestroyObjectRequest() {
  // @@protoc_insertion_point(destructor:uesynth.DestroyObjectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestroyObjectRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_name_.Destroy();
}

void DestroyObjectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestroyObjectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.DestroyObjectRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DestroyObjectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.DestroyObjectRequest.object_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DestroyObjectRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.DestroyObjectRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    const std::string& _s = this->_internal_object_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.DestroyObjectRequest.object_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.DestroyObjectRequest)
  return target;
}

::size_t DestroyObjectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.DestroyObjectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_object_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DestroyObjectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DestroyObjectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DestroyObjectRequest::GetClassData() const { return &_class_data_; }


void DestroyObjectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DestroyObjectRequest*>(&to_msg);
  auto& from = static_cast<const DestroyObjectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.DestroyObjectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_name().empty()) {
    _this->_internal_set_object_name(from._internal_object_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DestroyObjectRequest::CopyFrom(const DestroyObjectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.DestroyObjectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyObjectRequest::IsInitialized() const {
  return true;
}

void DestroyObjectRequest::InternalSwap(DestroyObjectRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_name_, lhs_arena,
                                       &other->_impl_.object_name_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DestroyObjectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[19]);
}
// ===================================================================

class SetMaterialRequest::_Internal {
 public:
};

SetMaterialRequest::SetMaterialRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.SetMaterialRequest)
}
SetMaterialRequest::SetMaterialRequest(const SetMaterialRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetMaterialRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_name_) {}

    , decltype(_impl_.material_property_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_name().empty()) {
    _this->_impl_.object_name_.Set(from._internal_object_name(), _this->GetArenaForAllocation());
  }
  _impl_.material_property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.material_property_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_material_property().empty()) {
    _this->_impl_.material_property_.Set(from._internal_material_property(), _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:uesynth.SetMaterialRequest)
}

inline void SetMaterialRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.object_name_) {}

    , decltype(_impl_.material_property_) {}

    , decltype(_impl_.value_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.material_property_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.material_property_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetMaterialRequest::~SetMaterialRequest() {
  // @@protoc_insertion_point(destructor:uesynth.SetMaterialRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetMaterialRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_name_.Destroy();
  _impl_.material_property_.Destroy();
  _impl_.value_.Destroy();
}

void SetMaterialRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetMaterialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.SetMaterialRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_name_.ClearToEmpty();
  _impl_.material_property_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMaterialRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string object_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_object_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SetMaterialRequest.object_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string material_property = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_material_property();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SetMaterialRequest.material_property"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SetMaterialRequest.value"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetMaterialRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.SetMaterialRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    const std::string& _s = this->_internal_object_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SetMaterialRequest.object_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string material_property = 2;
  if (!this->_internal_material_property().empty()) {
    const std::string& _s = this->_internal_material_property();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SetMaterialRequest.material_property");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SetMaterialRequest.value");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.SetMaterialRequest)
  return target;
}

::size_t SetMaterialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.SetMaterialRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string object_name = 1;
  if (!this->_internal_object_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_object_name());
  }

  // string material_property = 2;
  if (!this->_internal_material_property().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_material_property());
  }

  // string value = 3;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetMaterialRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetMaterialRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetMaterialRequest::GetClassData() const { return &_class_data_; }


void SetMaterialRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetMaterialRequest*>(&to_msg);
  auto& from = static_cast<const SetMaterialRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.SetMaterialRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_object_name().empty()) {
    _this->_internal_set_object_name(from._internal_object_name());
  }
  if (!from._internal_material_property().empty()) {
    _this->_internal_set_material_property(from._internal_material_property());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetMaterialRequest::CopyFrom(const SetMaterialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.SetMaterialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMaterialRequest::IsInitialized() const {
  return true;
}

void SetMaterialRequest::InternalSwap(SetMaterialRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_name_, lhs_arena,
                                       &other->_impl_.object_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.material_property_, lhs_arena,
                                       &other->_impl_.material_property_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, lhs_arena,
                                       &other->_impl_.value_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMaterialRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[20]);
}
// ===================================================================

class SetLightingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<SetLightingRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetLightingRequest, _impl_._has_bits_);
  static const ::uesynth::Vector3& color(const SetLightingRequest* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::uesynth::Transform& transform(const SetLightingRequest* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::uesynth::Vector3&
SetLightingRequest::_Internal::color(const SetLightingRequest* msg) {
  return *msg->_impl_.color_;
}
const ::uesynth::Transform&
SetLightingRequest::_Internal::transform(const SetLightingRequest* msg) {
  return *msg->_impl_.transform_;
}
SetLightingRequest::SetLightingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:uesynth.SetLightingRequest)
}
SetLightingRequest::SetLightingRequest(const SetLightingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetLightingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_name_) {}

    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.intensity_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.light_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.light_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_light_name().empty()) {
    _this->_impl_.light_name_.Set(from._internal_light_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.color_ = new ::uesynth::Vector3(*from._impl_.color_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.transform_ = new ::uesynth::Transform(*from._impl_.transform_);
  }
  _this->_impl_.intensity_ = from._impl_.intensity_;
  // @@protoc_insertion_point(copy_constructor:uesynth.SetLightingRequest)
}

inline void SetLightingRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.light_name_) {}

    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.transform_){nullptr}
    , decltype(_impl_.intensity_) { 0 }

  };
  _impl_.light_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.light_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetLightingRequest::~SetLightingRequest() {
  // @@protoc_insertion_point(destructor:uesynth.SetLightingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetLightingRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.light_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.transform_;
}

void SetLightingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetLightingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:uesynth.SetLightingRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.light_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
  }
  _impl_.intensity_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetLightingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string light_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_light_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "uesynth.SetLightingRequest.light_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // float intensity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 21)) {
          _impl_.intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.Vector3 color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .uesynth.Transform transform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetLightingRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:uesynth.SetLightingRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string light_name = 1;
  if (!this->_internal_light_name().empty()) {
    const std::string& _s = this->_internal_light_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "uesynth.SetLightingRequest.light_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // float intensity = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_intensity = this->_internal_intensity();
  ::uint32_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_intensity(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .uesynth.Vector3 color = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // .uesynth.Transform transform = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:uesynth.SetLightingRequest)
  return target;
}

::size_t SetLightingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:uesynth.SetLightingRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string light_name = 1;
  if (!this->_internal_light_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_light_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .uesynth.Vector3 color = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.color_);
    }

    // .uesynth.Transform transform = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transform_);
    }

  }
  // float intensity = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_intensity = this->_internal_intensity();
  ::uint32_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetLightingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetLightingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetLightingRequest::GetClassData() const { return &_class_data_; }


void SetLightingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetLightingRequest*>(&to_msg);
  auto& from = static_cast<const SetLightingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:uesynth.SetLightingRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_light_name().empty()) {
    _this->_internal_set_light_name(from._internal_light_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_color()->::uesynth::Vector3::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transform()->::uesynth::Transform::MergeFrom(
          from._internal_transform());
    }
  }
  static_assert(sizeof(::uint32_t) == sizeof(float), "Code assumes ::uint32_t and float are the same size.");
  float tmp_intensity = from._internal_intensity();
  ::uint32_t raw_intensity;
  memcpy(&raw_intensity, &tmp_intensity, sizeof(tmp_intensity));
  if (raw_intensity != 0) {
    _this->_internal_set_intensity(from._internal_intensity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetLightingRequest::CopyFrom(const SetLightingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:uesynth.SetLightingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLightingRequest::IsInitialized() const {
  return true;
}

void SetLightingRequest::InternalSwap(SetLightingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.light_name_, lhs_arena,
                                       &other->_impl_.light_name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetLightingRequest, _impl_.intensity_)
      + sizeof(SetLightingRequest::_impl_.intensity_)
      - PROTOBUF_FIELD_OFFSET(SetLightingRequest, _impl_.color_)>(
          reinterpret_cast<char*>(&_impl_.color_),
          reinterpret_cast<char*>(&other->_impl_.color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetLightingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_uesynth_2eproto_getter, &descriptor_table_uesynth_2eproto_once,
      file_level_metadata_uesynth_2eproto[21]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace uesynth
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::uesynth::ActionRequest*
Arena::CreateMaybeMessage< ::uesynth::ActionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::ActionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::FrameResponse*
Arena::CreateMaybeMessage< ::uesynth::FrameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::FrameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::Vector3*
Arena::CreateMaybeMessage< ::uesynth::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::Rotator*
Arena::CreateMaybeMessage< ::uesynth::Rotator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::Rotator >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::Transform*
Arena::CreateMaybeMessage< ::uesynth::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::CommandResponse*
Arena::CreateMaybeMessage< ::uesynth::CommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::CommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::SetCameraTransformRequest*
Arena::CreateMaybeMessage< ::uesynth::SetCameraTransformRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::SetCameraTransformRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::GetCameraTransformRequest*
Arena::CreateMaybeMessage< ::uesynth::GetCameraTransformRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::GetCameraTransformRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::GetCameraTransformResponse*
Arena::CreateMaybeMessage< ::uesynth::GetCameraTransformResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::GetCameraTransformResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::CaptureRequest*
Arena::CreateMaybeMessage< ::uesynth::CaptureRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::CaptureRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::ImageResponse*
Arena::CreateMaybeMessage< ::uesynth::ImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::ImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::SetObjectTransformRequest*
Arena::CreateMaybeMessage< ::uesynth::SetObjectTransformRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::SetObjectTransformRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::GetObjectTransformRequest*
Arena::CreateMaybeMessage< ::uesynth::GetObjectTransformRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::GetObjectTransformRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::GetObjectTransformResponse*
Arena::CreateMaybeMessage< ::uesynth::GetObjectTransformResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::GetObjectTransformResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::CreateCameraRequest*
Arena::CreateMaybeMessage< ::uesynth::CreateCameraRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::CreateCameraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::DestroyCameraRequest*
Arena::CreateMaybeMessage< ::uesynth::DestroyCameraRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::DestroyCameraRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::SetResolutionRequest*
Arena::CreateMaybeMessage< ::uesynth::SetResolutionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::SetResolutionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::ListObjectsResponse*
Arena::CreateMaybeMessage< ::uesynth::ListObjectsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::ListObjectsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::SpawnObjectRequest*
Arena::CreateMaybeMessage< ::uesynth::SpawnObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::SpawnObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::DestroyObjectRequest*
Arena::CreateMaybeMessage< ::uesynth::DestroyObjectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::DestroyObjectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::SetMaterialRequest*
Arena::CreateMaybeMessage< ::uesynth::SetMaterialRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::SetMaterialRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::uesynth::SetLightingRequest*
Arena::CreateMaybeMessage< ::uesynth::SetLightingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::uesynth::SetLightingRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
