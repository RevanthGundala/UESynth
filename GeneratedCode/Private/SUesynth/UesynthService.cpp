//Generated by TurboLink CodeGenerator, do not edit!
#include "SUesynth/UesynthService.h"
#include "SUesynth/UesynthClient.h"
#include "UesynthService_Private.h"
#include "UesynthMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "TurboLinkGrpcManager_Private.h"
#include "TurboLinkGrpcUtilities.h"

UUESynthService::UUESynthService()
	: d(new UUESynthService::Private())
{
}

UUESynthService::~UUESynthService()
{
	delete d;
}

void UUESynthService::Connect()
{
	FString serviceEndPoint = UTurboLinkGrpcUtilities::GetTurboLinkGrpcConfig()->GetServiceEndPoint(TEXT("UESynthService"));
	UE_LOG(LogTurboLink, Warning, TEXT("Connect to UESynthService: '%s'"), *serviceEndPoint);

	if (d->Channel == nullptr) {
		d->Channel = TurboLinkManager->d->CreateServiceChannel((const char*)StringCast<UTF8CHAR>(*serviceEndPoint).Get(), this);
	}
	if (d->Stub == nullptr) {
		d->Stub = uesynth::UESynthService::NewStub(d->Channel->RpcChannel);
	}

	grpc_connectivity_state currentChannelState = d->Channel->RpcChannel->GetState(true);
	if (OnServiceStateChanged.IsBound())
	{
		OnServiceStateChanged.Broadcast(UTurboLinkGrpcManager::Private::GrpcStateToServiceState(currentChannelState));
	}
}

EGrpcServiceState UUESynthService::GetServiceState() const
{
	if (d->Channel == nullptr) return EGrpcServiceState::NotCreate;

	auto rpcChannelState = d->Channel->RpcChannel->GetState(false);
	return UTurboLinkGrpcManager::Private::GrpcStateToServiceState(rpcChannelState);
}

UUESynthServiceClient* UUESynthService::MakeClient()
{
	auto client = UGrpcService::MakeClient<UUESynthServiceClient>();
	return client;
}

void UUESynthService::Shutdown()
{
	Super::Shutdown();
	d->Stub = nullptr;
	if (d->Channel != nullptr) {
		TurboLinkManager->d->RemoveServiceChannel(d->Channel, this);
		d->Channel = nullptr;
	}
}

void UUESynthService::CallSetCameraTransform(const FGrpcUesynthSetCameraTransformRequest& Request, FSetCameraTransformResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceSetCameraTransformLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceSetCameraTransformLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSetCameraTransform();
	InnerClient->OnSetCameraTransformResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceSetCameraTransformLambdaWrapper::OnResponse);
	InnerClient->SetCameraTransform(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallGetCameraTransform(const FGrpcUesynthGetCameraTransformRequest& Request, FGetCameraTransformResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceGetCameraTransformLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceGetCameraTransformLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetCameraTransform();
	InnerClient->OnGetCameraTransformResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceGetCameraTransformLambdaWrapper::OnResponse);
	InnerClient->GetCameraTransform(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallCaptureRgbImage(const FGrpcUesynthCaptureRequest& Request, FCaptureRgbImageResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceCaptureRgbImageLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceCaptureRgbImageLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCaptureRgbImage();
	InnerClient->OnCaptureRgbImageResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceCaptureRgbImageLambdaWrapper::OnResponse);
	InnerClient->CaptureRgbImage(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallCaptureDepthMap(const FGrpcUesynthCaptureRequest& Request, FCaptureDepthMapResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceCaptureDepthMapLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceCaptureDepthMapLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCaptureDepthMap();
	InnerClient->OnCaptureDepthMapResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceCaptureDepthMapLambdaWrapper::OnResponse);
	InnerClient->CaptureDepthMap(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallCaptureSegmentationMask(const FGrpcUesynthCaptureRequest& Request, FCaptureSegmentationMaskResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceCaptureSegmentationMaskLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceCaptureSegmentationMaskLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCaptureSegmentationMask();
	InnerClient->OnCaptureSegmentationMaskResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceCaptureSegmentationMaskLambdaWrapper::OnResponse);
	InnerClient->CaptureSegmentationMask(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallSetObjectTransform(const FGrpcUesynthSetObjectTransformRequest& Request, FSetObjectTransformResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceSetObjectTransformLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceSetObjectTransformLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSetObjectTransform();
	InnerClient->OnSetObjectTransformResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceSetObjectTransformLambdaWrapper::OnResponse);
	InnerClient->SetObjectTransform(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallGetObjectTransform(const FGrpcUesynthGetObjectTransformRequest& Request, FGetObjectTransformResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceGetObjectTransformLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceGetObjectTransformLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitGetObjectTransform();
	InnerClient->OnGetObjectTransformResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceGetObjectTransformLambdaWrapper::OnResponse);
	InnerClient->GetObjectTransform(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallCreateCamera(const FGrpcUesynthCreateCameraRequest& Request, FCreateCameraResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceCreateCameraLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceCreateCameraLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCreateCamera();
	InnerClient->OnCreateCameraResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceCreateCameraLambdaWrapper::OnResponse);
	InnerClient->CreateCamera(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallDestroyCamera(const FGrpcUesynthDestroyCameraRequest& Request, FDestroyCameraResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceDestroyCameraLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceDestroyCameraLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDestroyCamera();
	InnerClient->OnDestroyCameraResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceDestroyCameraLambdaWrapper::OnResponse);
	InnerClient->DestroyCamera(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallSetResolution(const FGrpcUesynthSetResolutionRequest& Request, FSetResolutionResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceSetResolutionLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceSetResolutionLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSetResolution();
	InnerClient->OnSetResolutionResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceSetResolutionLambdaWrapper::OnResponse);
	InnerClient->SetResolution(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallCaptureNormals(const FGrpcUesynthCaptureRequest& Request, FCaptureNormalsResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceCaptureNormalsLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceCaptureNormalsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCaptureNormals();
	InnerClient->OnCaptureNormalsResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceCaptureNormalsLambdaWrapper::OnResponse);
	InnerClient->CaptureNormals(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallCaptureOpticalFlow(const FGrpcUesynthCaptureRequest& Request, FCaptureOpticalFlowResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceCaptureOpticalFlowLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceCaptureOpticalFlowLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitCaptureOpticalFlow();
	InnerClient->OnCaptureOpticalFlowResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceCaptureOpticalFlowLambdaWrapper::OnResponse);
	InnerClient->CaptureOpticalFlow(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallSpawnObject(const FGrpcUesynthSpawnObjectRequest& Request, FSpawnObjectResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceSpawnObjectLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceSpawnObjectLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSpawnObject();
	InnerClient->OnSpawnObjectResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceSpawnObjectLambdaWrapper::OnResponse);
	InnerClient->SpawnObject(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallDestroyObject(const FGrpcUesynthDestroyObjectRequest& Request, FDestroyObjectResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceDestroyObjectLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceDestroyObjectLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitDestroyObject();
	InnerClient->OnDestroyObjectResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceDestroyObjectLambdaWrapper::OnResponse);
	InnerClient->DestroyObject(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallSetMaterial(const FGrpcUesynthSetMaterialRequest& Request, FSetMaterialResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceSetMaterialLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceSetMaterialLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSetMaterial();
	InnerClient->OnSetMaterialResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceSetMaterialLambdaWrapper::OnResponse);
	InnerClient->SetMaterial(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallListObjects(const FGrpcGoogleProtobufEmpty& Request, FListObjectsResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceListObjectsLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceListObjectsLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitListObjects();
	InnerClient->OnListObjectsResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceListObjectsLambdaWrapper::OnResponse);
	InnerClient->ListObjects(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}

void UUESynthService::CallSetLighting(const FGrpcUesynthSetLightingRequest& Request, FSetLightingResponseLambda ResponseLambda, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	if (InnerClient == nullptr)
	{
		InnerClient = MakeClient();
	}
	UUESynthServiceSetLightingLambdaWrapper* lambdaWrapper = NewObject<UUESynthServiceSetLightingLambdaWrapper>();
	lambdaWrapper->InnerClient = InnerClient;
	lambdaWrapper->ResponseLambda = ResponseLambda;
	lambdaWrapper->Handle = InnerClient->InitSetLighting();
	InnerClient->OnSetLightingResponse.AddUniqueDynamic(lambdaWrapper, &UUESynthServiceSetLightingLambdaWrapper::OnResponse);
	InnerClient->SetLighting(lambdaWrapper->Handle, Request, MetaData, DeadLineSeconds);
}
