//Generated by TurboLink CodeGenerator, do not edit!
#include "UesynthContext.h"
#include "SUesynth/UesynthClient.h"
#include "UesynthService_Private.h"
#include "UesynthMarshaling.h"
#include "SGoogleProtobuf/EmptyMarshaling.h"
#include "TurboLinkGrpcManager.h"

GrpcContext_UESynthService_ControlStream::GrpcContext_UESynthService_ControlStream(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_ControlStream::Init()
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncControlStream(RpcContext.get(), service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_UESynthService_ControlStream::Call(const FGrpcUesynthActionRequest& Request)
{
	::uesynth::ActionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	if (bCanSend) {
		RpcReaderWriter->Write(rpcRequest, WriteTag);
		bCanSend = false;
	}
	else {
		SendQueue.push_back(rpcRequest);
	}
}

void GrpcContext_UESynthService_ControlStream::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::FrameResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnControlStreamResponse.IsBound())) return;

			FGrpcUesynthFrameResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnControlStreamResponse.Broadcast(Handle, _Result, response);
		}
		, [this]() 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnControlStreamWriteComplete.IsBound())) return;

			client->OnControlStreamWriteComplete.Broadcast(Handle);
		}
	);
}

GrpcContext_UESynthService_SetCameraTransform::GrpcContext_UESynthService_SetCameraTransform(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_SetCameraTransform::Call(const FGrpcUesynthSetCameraTransformRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::SetCameraTransformRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSetCameraTransform(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_SetCameraTransform::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnSetCameraTransformResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSetCameraTransformResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_GetCameraTransform::GrpcContext_UESynthService_GetCameraTransform(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_GetCameraTransform::Call(const FGrpcUesynthGetCameraTransformRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::GetCameraTransformRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetCameraTransform(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_GetCameraTransform::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::GetCameraTransformResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnGetCameraTransformResponse.IsBound())) return;

			FGrpcUesynthGetCameraTransformResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetCameraTransformResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_CaptureRgbImage::GrpcContext_UESynthService_CaptureRgbImage(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_CaptureRgbImage::Call(const FGrpcUesynthCaptureRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::CaptureRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCaptureRgbImage(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_CaptureRgbImage::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::ImageResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnCaptureRgbImageResponse.IsBound())) return;

			FGrpcUesynthImageResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCaptureRgbImageResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_CaptureDepthMap::GrpcContext_UESynthService_CaptureDepthMap(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_CaptureDepthMap::Call(const FGrpcUesynthCaptureRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::CaptureRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCaptureDepthMap(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_CaptureDepthMap::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::ImageResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnCaptureDepthMapResponse.IsBound())) return;

			FGrpcUesynthImageResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCaptureDepthMapResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_CaptureSegmentationMask::GrpcContext_UESynthService_CaptureSegmentationMask(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_CaptureSegmentationMask::Call(const FGrpcUesynthCaptureRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::CaptureRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCaptureSegmentationMask(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_CaptureSegmentationMask::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::ImageResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnCaptureSegmentationMaskResponse.IsBound())) return;

			FGrpcUesynthImageResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCaptureSegmentationMaskResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_SetObjectTransform::GrpcContext_UESynthService_SetObjectTransform(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_SetObjectTransform::Call(const FGrpcUesynthSetObjectTransformRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::SetObjectTransformRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSetObjectTransform(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_SetObjectTransform::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnSetObjectTransformResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSetObjectTransformResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_GetObjectTransform::GrpcContext_UESynthService_GetObjectTransform(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_GetObjectTransform::Call(const FGrpcUesynthGetObjectTransformRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::GetObjectTransformRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncGetObjectTransform(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_GetObjectTransform::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::GetObjectTransformResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnGetObjectTransformResponse.IsBound())) return;

			FGrpcUesynthGetObjectTransformResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnGetObjectTransformResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_CreateCamera::GrpcContext_UESynthService_CreateCamera(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_CreateCamera::Call(const FGrpcUesynthCreateCameraRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::CreateCameraRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCreateCamera(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_CreateCamera::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnCreateCameraResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCreateCameraResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_DestroyCamera::GrpcContext_UESynthService_DestroyCamera(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_DestroyCamera::Call(const FGrpcUesynthDestroyCameraRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::DestroyCameraRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDestroyCamera(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_DestroyCamera::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnDestroyCameraResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDestroyCameraResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_SetResolution::GrpcContext_UESynthService_SetResolution(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_SetResolution::Call(const FGrpcUesynthSetResolutionRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::SetResolutionRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSetResolution(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_SetResolution::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnSetResolutionResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSetResolutionResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_CaptureNormals::GrpcContext_UESynthService_CaptureNormals(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_CaptureNormals::Call(const FGrpcUesynthCaptureRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::CaptureRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCaptureNormals(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_CaptureNormals::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::ImageResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnCaptureNormalsResponse.IsBound())) return;

			FGrpcUesynthImageResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCaptureNormalsResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_CaptureOpticalFlow::GrpcContext_UESynthService_CaptureOpticalFlow(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_CaptureOpticalFlow::Call(const FGrpcUesynthCaptureRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::CaptureRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncCaptureOpticalFlow(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_CaptureOpticalFlow::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::ImageResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnCaptureOpticalFlowResponse.IsBound())) return;

			FGrpcUesynthImageResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnCaptureOpticalFlowResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_SpawnObject::GrpcContext_UESynthService_SpawnObject(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_SpawnObject::Call(const FGrpcUesynthSpawnObjectRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::SpawnObjectRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSpawnObject(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_SpawnObject::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnSpawnObjectResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSpawnObjectResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_DestroyObject::GrpcContext_UESynthService_DestroyObject(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_DestroyObject::Call(const FGrpcUesynthDestroyObjectRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::DestroyObjectRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncDestroyObject(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_DestroyObject::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnDestroyObjectResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnDestroyObjectResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_SetMaterial::GrpcContext_UESynthService_SetMaterial(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_SetMaterial::Call(const FGrpcUesynthSetMaterialRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::SetMaterialRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSetMaterial(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_SetMaterial::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnSetMaterialResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSetMaterialResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_ListObjects::GrpcContext_UESynthService_ListObjects(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_ListObjects::Call(const FGrpcGoogleProtobufEmpty& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::google::protobuf::Empty rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncListObjects(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_ListObjects::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::ListObjectsResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnListObjectsResponse.IsBound())) return;

			FGrpcUesynthListObjectsResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnListObjectsResponse.Broadcast(Handle, _Result, response);
		}
	);
}

GrpcContext_UESynthService_SetLighting::GrpcContext_UESynthService_SetLighting(FGrpcContextHandle _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

void GrpcContext_UESynthService_SetLighting::Call(const FGrpcUesynthSetLightingRequest& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	::uesynth::SetLightingRequest rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	UUESynthService* service = (UUESynthService*)Service;
	RpcReaderWriter = service->d->Stub->AsyncSetLighting(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

void GrpcContext_UESynthService_SetLighting::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag, 
		[this](const FGrpcResult& _Result, ::uesynth::CommandResponse* _RpcResponse) 
		{
			UUESynthServiceClient* client = (UUESynthServiceClient*)(this->Client);
			if (!(client->OnSetLightingResponse.IsBound())) return;

			FGrpcUesynthCommandResponse response;
			if (_RpcResponse) {
				GRPC_TO_TURBOLINK(_RpcResponse, &response);
			}
			client->OnSetLightingResponse.Broadcast(Handle, _Result, response);
		}
	);
}
