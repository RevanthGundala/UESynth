//Generated by TurboLink CodeGenerator, do not edit!
#include "SUesynth/UesynthNode.h"
#include "SUesynth/UesynthService.h"
#include "TurboLinkGrpcManager.h"
#include "TurboLinkGrpcUtilities.h"
#include "Engine/World.h"
#include "TimerManager.h"
#include "Runtime/Launch/Resources/Version.h"

UCallUESynthServiceSetCameraTransform* UCallUESynthServiceSetCameraTransform::SetCameraTransform(UObject* WorldContextObject, const FGrpcUesynthSetCameraTransformRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceSetCameraTransform* node = NewObject<UCallUESynthServiceSetCameraTransform>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceSetCameraTransform::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceSetCameraTransform::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceSetCameraTransform::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceSetCameraTransform::OnContextStateChange);
		UESynthServiceClient->OnSetCameraTransformResponse.AddUniqueDynamic(this, &UCallUESynthServiceSetCameraTransform::OnResponse);

		Context = UESynthServiceClient->InitSetCameraTransform();
		UESynthServiceClient->SetCameraTransform(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceSetCameraTransform::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceSetCameraTransform::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSetCameraTransformResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceSetCameraTransform::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceSetCameraTransform::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceGetCameraTransform* UCallUESynthServiceGetCameraTransform::GetCameraTransform(UObject* WorldContextObject, const FGrpcUesynthGetCameraTransformRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceGetCameraTransform* node = NewObject<UCallUESynthServiceGetCameraTransform>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceGetCameraTransform::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceGetCameraTransform::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceGetCameraTransform::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthGetCameraTransformResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceGetCameraTransform::OnContextStateChange);
		UESynthServiceClient->OnGetCameraTransformResponse.AddUniqueDynamic(this, &UCallUESynthServiceGetCameraTransform::OnResponse);

		Context = UESynthServiceClient->InitGetCameraTransform();
		UESynthServiceClient->GetCameraTransform(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceGetCameraTransform::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceGetCameraTransform::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthGetCameraTransformResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetCameraTransformResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceGetCameraTransform::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceGetCameraTransform::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceCaptureRgbImage* UCallUESynthServiceCaptureRgbImage::CaptureRgbImage(UObject* WorldContextObject, const FGrpcUesynthCaptureRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceCaptureRgbImage* node = NewObject<UCallUESynthServiceCaptureRgbImage>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceCaptureRgbImage::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceCaptureRgbImage::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceCaptureRgbImage::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthImageResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceCaptureRgbImage::OnContextStateChange);
		UESynthServiceClient->OnCaptureRgbImageResponse.AddUniqueDynamic(this, &UCallUESynthServiceCaptureRgbImage::OnResponse);

		Context = UESynthServiceClient->InitCaptureRgbImage();
		UESynthServiceClient->CaptureRgbImage(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceCaptureRgbImage::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceCaptureRgbImage::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCaptureRgbImageResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceCaptureRgbImage::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceCaptureRgbImage::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceCaptureDepthMap* UCallUESynthServiceCaptureDepthMap::CaptureDepthMap(UObject* WorldContextObject, const FGrpcUesynthCaptureRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceCaptureDepthMap* node = NewObject<UCallUESynthServiceCaptureDepthMap>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceCaptureDepthMap::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceCaptureDepthMap::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceCaptureDepthMap::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthImageResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceCaptureDepthMap::OnContextStateChange);
		UESynthServiceClient->OnCaptureDepthMapResponse.AddUniqueDynamic(this, &UCallUESynthServiceCaptureDepthMap::OnResponse);

		Context = UESynthServiceClient->InitCaptureDepthMap();
		UESynthServiceClient->CaptureDepthMap(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceCaptureDepthMap::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceCaptureDepthMap::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCaptureDepthMapResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceCaptureDepthMap::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceCaptureDepthMap::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceCaptureSegmentationMask* UCallUESynthServiceCaptureSegmentationMask::CaptureSegmentationMask(UObject* WorldContextObject, const FGrpcUesynthCaptureRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceCaptureSegmentationMask* node = NewObject<UCallUESynthServiceCaptureSegmentationMask>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceCaptureSegmentationMask::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceCaptureSegmentationMask::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceCaptureSegmentationMask::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthImageResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceCaptureSegmentationMask::OnContextStateChange);
		UESynthServiceClient->OnCaptureSegmentationMaskResponse.AddUniqueDynamic(this, &UCallUESynthServiceCaptureSegmentationMask::OnResponse);

		Context = UESynthServiceClient->InitCaptureSegmentationMask();
		UESynthServiceClient->CaptureSegmentationMask(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceCaptureSegmentationMask::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceCaptureSegmentationMask::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCaptureSegmentationMaskResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceCaptureSegmentationMask::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceCaptureSegmentationMask::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceSetObjectTransform* UCallUESynthServiceSetObjectTransform::SetObjectTransform(UObject* WorldContextObject, const FGrpcUesynthSetObjectTransformRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceSetObjectTransform* node = NewObject<UCallUESynthServiceSetObjectTransform>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceSetObjectTransform::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceSetObjectTransform::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceSetObjectTransform::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceSetObjectTransform::OnContextStateChange);
		UESynthServiceClient->OnSetObjectTransformResponse.AddUniqueDynamic(this, &UCallUESynthServiceSetObjectTransform::OnResponse);

		Context = UESynthServiceClient->InitSetObjectTransform();
		UESynthServiceClient->SetObjectTransform(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceSetObjectTransform::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceSetObjectTransform::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSetObjectTransformResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceSetObjectTransform::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceSetObjectTransform::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceGetObjectTransform* UCallUESynthServiceGetObjectTransform::GetObjectTransform(UObject* WorldContextObject, const FGrpcUesynthGetObjectTransformRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceGetObjectTransform* node = NewObject<UCallUESynthServiceGetObjectTransform>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceGetObjectTransform::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceGetObjectTransform::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceGetObjectTransform::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthGetObjectTransformResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceGetObjectTransform::OnContextStateChange);
		UESynthServiceClient->OnGetObjectTransformResponse.AddUniqueDynamic(this, &UCallUESynthServiceGetObjectTransform::OnResponse);

		Context = UESynthServiceClient->InitGetObjectTransform();
		UESynthServiceClient->GetObjectTransform(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceGetObjectTransform::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceGetObjectTransform::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthGetObjectTransformResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnGetObjectTransformResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceGetObjectTransform::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceGetObjectTransform::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceCreateCamera* UCallUESynthServiceCreateCamera::CreateCamera(UObject* WorldContextObject, const FGrpcUesynthCreateCameraRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceCreateCamera* node = NewObject<UCallUESynthServiceCreateCamera>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceCreateCamera::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceCreateCamera::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceCreateCamera::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceCreateCamera::OnContextStateChange);
		UESynthServiceClient->OnCreateCameraResponse.AddUniqueDynamic(this, &UCallUESynthServiceCreateCamera::OnResponse);

		Context = UESynthServiceClient->InitCreateCamera();
		UESynthServiceClient->CreateCamera(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceCreateCamera::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceCreateCamera::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCreateCameraResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceCreateCamera::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceCreateCamera::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceDestroyCamera* UCallUESynthServiceDestroyCamera::DestroyCamera(UObject* WorldContextObject, const FGrpcUesynthDestroyCameraRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceDestroyCamera* node = NewObject<UCallUESynthServiceDestroyCamera>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceDestroyCamera::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceDestroyCamera::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceDestroyCamera::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceDestroyCamera::OnContextStateChange);
		UESynthServiceClient->OnDestroyCameraResponse.AddUniqueDynamic(this, &UCallUESynthServiceDestroyCamera::OnResponse);

		Context = UESynthServiceClient->InitDestroyCamera();
		UESynthServiceClient->DestroyCamera(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceDestroyCamera::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceDestroyCamera::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDestroyCameraResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceDestroyCamera::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceDestroyCamera::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceSetResolution* UCallUESynthServiceSetResolution::SetResolution(UObject* WorldContextObject, const FGrpcUesynthSetResolutionRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceSetResolution* node = NewObject<UCallUESynthServiceSetResolution>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceSetResolution::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceSetResolution::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceSetResolution::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceSetResolution::OnContextStateChange);
		UESynthServiceClient->OnSetResolutionResponse.AddUniqueDynamic(this, &UCallUESynthServiceSetResolution::OnResponse);

		Context = UESynthServiceClient->InitSetResolution();
		UESynthServiceClient->SetResolution(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceSetResolution::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceSetResolution::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSetResolutionResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceSetResolution::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceSetResolution::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceCaptureNormals* UCallUESynthServiceCaptureNormals::CaptureNormals(UObject* WorldContextObject, const FGrpcUesynthCaptureRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceCaptureNormals* node = NewObject<UCallUESynthServiceCaptureNormals>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceCaptureNormals::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceCaptureNormals::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceCaptureNormals::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthImageResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceCaptureNormals::OnContextStateChange);
		UESynthServiceClient->OnCaptureNormalsResponse.AddUniqueDynamic(this, &UCallUESynthServiceCaptureNormals::OnResponse);

		Context = UESynthServiceClient->InitCaptureNormals();
		UESynthServiceClient->CaptureNormals(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceCaptureNormals::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceCaptureNormals::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCaptureNormalsResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceCaptureNormals::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceCaptureNormals::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceCaptureOpticalFlow* UCallUESynthServiceCaptureOpticalFlow::CaptureOpticalFlow(UObject* WorldContextObject, const FGrpcUesynthCaptureRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceCaptureOpticalFlow* node = NewObject<UCallUESynthServiceCaptureOpticalFlow>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceCaptureOpticalFlow::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceCaptureOpticalFlow::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceCaptureOpticalFlow::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthImageResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceCaptureOpticalFlow::OnContextStateChange);
		UESynthServiceClient->OnCaptureOpticalFlowResponse.AddUniqueDynamic(this, &UCallUESynthServiceCaptureOpticalFlow::OnResponse);

		Context = UESynthServiceClient->InitCaptureOpticalFlow();
		UESynthServiceClient->CaptureOpticalFlow(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceCaptureOpticalFlow::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceCaptureOpticalFlow::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnCaptureOpticalFlowResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceCaptureOpticalFlow::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceCaptureOpticalFlow::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceSpawnObject* UCallUESynthServiceSpawnObject::SpawnObject(UObject* WorldContextObject, const FGrpcUesynthSpawnObjectRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceSpawnObject* node = NewObject<UCallUESynthServiceSpawnObject>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceSpawnObject::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceSpawnObject::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceSpawnObject::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceSpawnObject::OnContextStateChange);
		UESynthServiceClient->OnSpawnObjectResponse.AddUniqueDynamic(this, &UCallUESynthServiceSpawnObject::OnResponse);

		Context = UESynthServiceClient->InitSpawnObject();
		UESynthServiceClient->SpawnObject(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceSpawnObject::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceSpawnObject::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSpawnObjectResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceSpawnObject::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceSpawnObject::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceDestroyObject* UCallUESynthServiceDestroyObject::DestroyObject(UObject* WorldContextObject, const FGrpcUesynthDestroyObjectRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceDestroyObject* node = NewObject<UCallUESynthServiceDestroyObject>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceDestroyObject::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceDestroyObject::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceDestroyObject::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceDestroyObject::OnContextStateChange);
		UESynthServiceClient->OnDestroyObjectResponse.AddUniqueDynamic(this, &UCallUESynthServiceDestroyObject::OnResponse);

		Context = UESynthServiceClient->InitDestroyObject();
		UESynthServiceClient->DestroyObject(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceDestroyObject::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceDestroyObject::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnDestroyObjectResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceDestroyObject::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceDestroyObject::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceSetMaterial* UCallUESynthServiceSetMaterial::SetMaterial(UObject* WorldContextObject, const FGrpcUesynthSetMaterialRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceSetMaterial* node = NewObject<UCallUESynthServiceSetMaterial>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceSetMaterial::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceSetMaterial::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceSetMaterial::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceSetMaterial::OnContextStateChange);
		UESynthServiceClient->OnSetMaterialResponse.AddUniqueDynamic(this, &UCallUESynthServiceSetMaterial::OnResponse);

		Context = UESynthServiceClient->InitSetMaterial();
		UESynthServiceClient->SetMaterial(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceSetMaterial::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceSetMaterial::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSetMaterialResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceSetMaterial::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceSetMaterial::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceListObjects* UCallUESynthServiceListObjects::ListObjects(UObject* WorldContextObject, const FGrpcGoogleProtobufEmpty& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceListObjects* node = NewObject<UCallUESynthServiceListObjects>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceListObjects::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceListObjects::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceListObjects::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthListObjectsResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceListObjects::OnContextStateChange);
		UESynthServiceClient->OnListObjectsResponse.AddUniqueDynamic(this, &UCallUESynthServiceListObjects::OnResponse);

		Context = UESynthServiceClient->InitListObjects();
		UESynthServiceClient->ListObjects(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceListObjects::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceListObjects::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthListObjectsResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnListObjectsResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceListObjects::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceListObjects::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}

UCallUESynthServiceSetLighting* UCallUESynthServiceSetLighting::SetLighting(UObject* WorldContextObject, const FGrpcUesynthSetLightingRequest& request, FGrpcMetaData metaData, float deadLineSeconds)
{
	UCallUESynthServiceSetLighting* node = NewObject<UCallUESynthServiceSetLighting>(WorldContextObject);
	UTurboLinkGrpcManager* turboLinkManager = UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(WorldContextObject);

	node->UESynthService = Cast<UUESynthService>(turboLinkManager->MakeService("UESynthService"));
	if (node->UESynthService == nullptr)
	{
		return nullptr;
	}
	node->ServiceState = EGrpcServiceState::Idle;
	node->Request = request;
	node->MetaData = metaData;
	node->DeadLineSeconds = deadLineSeconds;

	node->UESynthService->OnServiceStateChanged.AddUniqueDynamic(node, &UCallUESynthServiceSetLighting::OnServiceStateChanged);
	return node;
}

void UCallUESynthServiceSetLighting::Activate()
{
	UESynthService->Connect();
}

void UCallUESynthServiceSetLighting::OnServiceStateChanged(EGrpcServiceState NewState)
{
	if (ServiceState == NewState) return;
	ServiceState = NewState;

	if (NewState == EGrpcServiceState::TransientFailure)
	{
		FGrpcResult result;
		result.Code = EGrpcResultCode::ConnectionFailed;

		FGrpcUesynthCommandResponse response;
		OnFail.Broadcast(result, response);

		Shutdown();
		return;
	}

	if (NewState == EGrpcServiceState::Ready)
	{
		UESynthServiceClient = UESynthService->MakeClient();
		UESynthServiceClient->OnContextStateChange.AddUniqueDynamic(this, &UCallUESynthServiceSetLighting::OnContextStateChange);
		UESynthServiceClient->OnSetLightingResponse.AddUniqueDynamic(this, &UCallUESynthServiceSetLighting::OnResponse);

		Context = UESynthServiceClient->InitSetLighting();
		UESynthServiceClient->SetLighting(Context, Request, MetaData, DeadLineSeconds);
	}
}

void UCallUESynthServiceSetLighting::OnContextStateChange(FGrpcContextHandle Handle, EGrpcContextState State)
{
	if (State == EGrpcContextState::Done)
	{
		Shutdown();
	}
}

void UCallUESynthServiceSetLighting::OnResponse(FGrpcContextHandle Handle, const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)
{
	if (GrpcResult.Code == EGrpcResultCode::Ok)
	{
		OnSetLightingResponse.Broadcast(GrpcResult, Response);
	}
	else
	{
		OnFail.Broadcast(GrpcResult, Response);
	}
}

void UCallUESynthServiceSetLighting::Shutdown()
{
	UESynthService->OnServiceStateChanged.RemoveDynamic(this, &UCallUESynthServiceSetLighting::OnServiceStateChanged);
	if (UESynthServiceClient != nullptr)
	{
		UESynthService->RemoveClient(UESynthServiceClient);
		UESynthServiceClient->Shutdown();
		UESynthServiceClient = nullptr;
	}

	if (UESynthService != nullptr)
	{
		UTurboLinkGrpcUtilities::GetTurboLinkGrpcManager(this)->ReleaseService(UESynthService);
		UESynthService = nullptr;
	}

	SetReadyToDestroy();
#if ENGINE_MAJOR_VERSION>=5
	MarkAsGarbage();
#else
	MarkPendingKill();
#endif
}
