//Generated by TurboLink CodeGenerator, do not edit!
#include "SUesynth/UesynthClient.h"
#include "SUesynth/UesynthService.h"
#include "UesynthContext.h"
#include "TurboLinkGrpcManager_Private.h"
#include "Templates/SharedPointer.h"

FGrpcContextHandle UUESynthServiceClient::InitControlStream()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_ControlStream>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	context->Init();
	return context->GetHandle();
}

void UUESynthServiceClient::ControlStream(FGrpcContextHandle Handle, const FGrpcUesynthActionRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextControlStream = StaticCastSharedPtr<GrpcContext_UESynthService_ControlStream>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextControlStream->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextControlStream->RpcContext->set_deadline(deadLine);
		}
		contextControlStream->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitSetCameraTransform()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_SetCameraTransform>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::SetCameraTransform(FGrpcContextHandle Handle, const FGrpcUesynthSetCameraTransformRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextSetCameraTransform = StaticCastSharedPtr<GrpcContext_UESynthService_SetCameraTransform>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextSetCameraTransform->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextSetCameraTransform->RpcContext->set_deadline(deadLine);
		}
		contextSetCameraTransform->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitGetCameraTransform()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_GetCameraTransform>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::GetCameraTransform(FGrpcContextHandle Handle, const FGrpcUesynthGetCameraTransformRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetCameraTransform = StaticCastSharedPtr<GrpcContext_UESynthService_GetCameraTransform>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextGetCameraTransform->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextGetCameraTransform->RpcContext->set_deadline(deadLine);
		}
		contextGetCameraTransform->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitCaptureRgbImage()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_CaptureRgbImage>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::CaptureRgbImage(FGrpcContextHandle Handle, const FGrpcUesynthCaptureRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextCaptureRgbImage = StaticCastSharedPtr<GrpcContext_UESynthService_CaptureRgbImage>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextCaptureRgbImage->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextCaptureRgbImage->RpcContext->set_deadline(deadLine);
		}
		contextCaptureRgbImage->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitCaptureDepthMap()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_CaptureDepthMap>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::CaptureDepthMap(FGrpcContextHandle Handle, const FGrpcUesynthCaptureRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextCaptureDepthMap = StaticCastSharedPtr<GrpcContext_UESynthService_CaptureDepthMap>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextCaptureDepthMap->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextCaptureDepthMap->RpcContext->set_deadline(deadLine);
		}
		contextCaptureDepthMap->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitCaptureSegmentationMask()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_CaptureSegmentationMask>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::CaptureSegmentationMask(FGrpcContextHandle Handle, const FGrpcUesynthCaptureRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextCaptureSegmentationMask = StaticCastSharedPtr<GrpcContext_UESynthService_CaptureSegmentationMask>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextCaptureSegmentationMask->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextCaptureSegmentationMask->RpcContext->set_deadline(deadLine);
		}
		contextCaptureSegmentationMask->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitSetObjectTransform()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_SetObjectTransform>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::SetObjectTransform(FGrpcContextHandle Handle, const FGrpcUesynthSetObjectTransformRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextSetObjectTransform = StaticCastSharedPtr<GrpcContext_UESynthService_SetObjectTransform>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextSetObjectTransform->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextSetObjectTransform->RpcContext->set_deadline(deadLine);
		}
		contextSetObjectTransform->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitGetObjectTransform()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_GetObjectTransform>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::GetObjectTransform(FGrpcContextHandle Handle, const FGrpcUesynthGetObjectTransformRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextGetObjectTransform = StaticCastSharedPtr<GrpcContext_UESynthService_GetObjectTransform>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextGetObjectTransform->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextGetObjectTransform->RpcContext->set_deadline(deadLine);
		}
		contextGetObjectTransform->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitCreateCamera()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_CreateCamera>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::CreateCamera(FGrpcContextHandle Handle, const FGrpcUesynthCreateCameraRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextCreateCamera = StaticCastSharedPtr<GrpcContext_UESynthService_CreateCamera>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextCreateCamera->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextCreateCamera->RpcContext->set_deadline(deadLine);
		}
		contextCreateCamera->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitDestroyCamera()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_DestroyCamera>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::DestroyCamera(FGrpcContextHandle Handle, const FGrpcUesynthDestroyCameraRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextDestroyCamera = StaticCastSharedPtr<GrpcContext_UESynthService_DestroyCamera>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextDestroyCamera->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextDestroyCamera->RpcContext->set_deadline(deadLine);
		}
		contextDestroyCamera->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitSetResolution()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_SetResolution>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::SetResolution(FGrpcContextHandle Handle, const FGrpcUesynthSetResolutionRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextSetResolution = StaticCastSharedPtr<GrpcContext_UESynthService_SetResolution>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextSetResolution->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextSetResolution->RpcContext->set_deadline(deadLine);
		}
		contextSetResolution->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitCaptureNormals()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_CaptureNormals>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::CaptureNormals(FGrpcContextHandle Handle, const FGrpcUesynthCaptureRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextCaptureNormals = StaticCastSharedPtr<GrpcContext_UESynthService_CaptureNormals>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextCaptureNormals->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextCaptureNormals->RpcContext->set_deadline(deadLine);
		}
		contextCaptureNormals->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitCaptureOpticalFlow()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_CaptureOpticalFlow>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::CaptureOpticalFlow(FGrpcContextHandle Handle, const FGrpcUesynthCaptureRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextCaptureOpticalFlow = StaticCastSharedPtr<GrpcContext_UESynthService_CaptureOpticalFlow>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextCaptureOpticalFlow->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextCaptureOpticalFlow->RpcContext->set_deadline(deadLine);
		}
		contextCaptureOpticalFlow->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitSpawnObject()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_SpawnObject>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::SpawnObject(FGrpcContextHandle Handle, const FGrpcUesynthSpawnObjectRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextSpawnObject = StaticCastSharedPtr<GrpcContext_UESynthService_SpawnObject>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextSpawnObject->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextSpawnObject->RpcContext->set_deadline(deadLine);
		}
		contextSpawnObject->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitDestroyObject()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_DestroyObject>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::DestroyObject(FGrpcContextHandle Handle, const FGrpcUesynthDestroyObjectRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextDestroyObject = StaticCastSharedPtr<GrpcContext_UESynthService_DestroyObject>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextDestroyObject->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextDestroyObject->RpcContext->set_deadline(deadLine);
		}
		contextDestroyObject->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitSetMaterial()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_SetMaterial>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::SetMaterial(FGrpcContextHandle Handle, const FGrpcUesynthSetMaterialRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextSetMaterial = StaticCastSharedPtr<GrpcContext_UESynthService_SetMaterial>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextSetMaterial->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextSetMaterial->RpcContext->set_deadline(deadLine);
		}
		contextSetMaterial->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitListObjects()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_ListObjects>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::ListObjects(FGrpcContextHandle Handle, const FGrpcGoogleProtobufEmpty& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextListObjects = StaticCastSharedPtr<GrpcContext_UESynthService_ListObjects>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextListObjects->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextListObjects->RpcContext->set_deadline(deadLine);
		}
		contextListObjects->Call(Request);
	}
}

FGrpcContextHandle UUESynthServiceClient::InitSetLighting()
{
	FGrpcContextHandle handle = Service->TurboLinkManager->GetNextContextHandle();
	auto context = UGrpcClient::MakeContext<GrpcContext_UESynthService_SetLighting>(handle);
	context->RpcContext = UTurboLinkGrpcManager::Private::CreateRpcClientContext();
	return context->GetHandle();
}

void UUESynthServiceClient::SetLighting(FGrpcContextHandle Handle, const FGrpcUesynthSetLightingRequest& Request, FGrpcMetaData MetaData, float DeadLineSeconds)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		auto contextSetLighting = StaticCastSharedPtr<GrpcContext_UESynthService_SetLighting>(*context);
		for (const auto& metaDataPair : MetaData.MetaData)
		{
			contextSetLighting->RpcContext->AddMetadata(
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Key)).Get(),
				(const char*)StringCast<UTF8CHAR>(*(metaDataPair.Value)).Get()
			);
		}

		if (DeadLineSeconds > 0.f)
		{
			std::chrono::time_point deadLine = std::chrono::system_clock::now() + 
				std::chrono::milliseconds((int32)(1000.f * DeadLineSeconds));
			contextSetLighting->RpcContext->set_deadline(deadLine);
		}
		contextSetLighting->Call(Request);
	}
}

void UUESynthServiceClient::TryCancel(FGrpcContextHandle Handle)
{
	auto context = UGrpcClient::GetContext(Handle);
	if (context != nullptr)
	{
		(*context)->TryCancel();
	}
}

void UUESynthServiceClient::Shutdown()
{
	OnControlStreamResponse.Clear();
	OnSetCameraTransformResponse.Clear();
	OnGetCameraTransformResponse.Clear();
	OnCaptureRgbImageResponse.Clear();
	OnCaptureDepthMapResponse.Clear();
	OnCaptureSegmentationMaskResponse.Clear();
	OnSetObjectTransformResponse.Clear();
	OnGetObjectTransformResponse.Clear();
	OnCreateCameraResponse.Clear();
	OnDestroyCameraResponse.Clear();
	OnSetResolutionResponse.Clear();
	OnCaptureNormalsResponse.Clear();
	OnCaptureOpticalFlowResponse.Clear();
	OnSpawnObjectResponse.Clear();
	OnDestroyObjectResponse.Clear();
	OnSetMaterialResponse.Clear();
	OnListObjectsResponse.Clear();
	OnSetLightingResponse.Clear();
	Super::Shutdown();
}

