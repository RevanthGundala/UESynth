//Generated by TurboLink CodeGenerator, do not edit!
#pragma once
#include "TurboLinkGrpcService.h"
#include "SUesynth/UesynthClient.h"
#include "UesynthService.generated.h"

class UTurboLinkGrpcManager;

UCLASS(ClassGroup = TurboLink, BlueprintType)
class TURBOLINKGRPC_API UUESynthService : public UGrpcService
{
	GENERATED_BODY()
public:
	UFUNCTION(BlueprintCallable, Category = TurboLink)
	virtual void Connect() override;
	
	UFUNCTION(BlueprintCallable, Category = TurboLink)
	virtual EGrpcServiceState GetServiceState() const override;

	UFUNCTION(BlueprintCallable, Category = TurboLink)
	UUESynthServiceClient* MakeClient();

private:
	virtual void Shutdown() override;

	UPROPERTY()
	UUESynthServiceClient* InnerClient; 
public:
	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FSetCameraTransformResponseLambda;
	void CallSetCameraTransform(const FGrpcUesynthSetCameraTransformRequest& Request, FSetCameraTransformResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthGetCameraTransformResponse& Response)> FGetCameraTransformResponseLambda;
	void CallGetCameraTransform(const FGrpcUesynthGetCameraTransformRequest& Request, FGetCameraTransformResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)> FCaptureRgbImageResponseLambda;
	void CallCaptureRgbImage(const FGrpcUesynthCaptureRequest& Request, FCaptureRgbImageResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)> FCaptureDepthMapResponseLambda;
	void CallCaptureDepthMap(const FGrpcUesynthCaptureRequest& Request, FCaptureDepthMapResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)> FCaptureSegmentationMaskResponseLambda;
	void CallCaptureSegmentationMask(const FGrpcUesynthCaptureRequest& Request, FCaptureSegmentationMaskResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FSetObjectTransformResponseLambda;
	void CallSetObjectTransform(const FGrpcUesynthSetObjectTransformRequest& Request, FSetObjectTransformResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthGetObjectTransformResponse& Response)> FGetObjectTransformResponseLambda;
	void CallGetObjectTransform(const FGrpcUesynthGetObjectTransformRequest& Request, FGetObjectTransformResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FCreateCameraResponseLambda;
	void CallCreateCamera(const FGrpcUesynthCreateCameraRequest& Request, FCreateCameraResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FDestroyCameraResponseLambda;
	void CallDestroyCamera(const FGrpcUesynthDestroyCameraRequest& Request, FDestroyCameraResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FSetResolutionResponseLambda;
	void CallSetResolution(const FGrpcUesynthSetResolutionRequest& Request, FSetResolutionResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)> FCaptureNormalsResponseLambda;
	void CallCaptureNormals(const FGrpcUesynthCaptureRequest& Request, FCaptureNormalsResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthImageResponse& Response)> FCaptureOpticalFlowResponseLambda;
	void CallCaptureOpticalFlow(const FGrpcUesynthCaptureRequest& Request, FCaptureOpticalFlowResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FSpawnObjectResponseLambda;
	void CallSpawnObject(const FGrpcUesynthSpawnObjectRequest& Request, FSpawnObjectResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FDestroyObjectResponseLambda;
	void CallDestroyObject(const FGrpcUesynthDestroyObjectRequest& Request, FDestroyObjectResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FSetMaterialResponseLambda;
	void CallSetMaterial(const FGrpcUesynthSetMaterialRequest& Request, FSetMaterialResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthListObjectsResponse& Response)> FListObjectsResponseLambda;
	void CallListObjects(const FGrpcGoogleProtobufEmpty& Request, FListObjectsResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

	typedef TFunction<void(const FGrpcResult& GrpcResult, const FGrpcUesynthCommandResponse& Response)> FSetLightingResponseLambda;
	void CallSetLighting(const FGrpcUesynthSetLightingRequest& Request, FSetLightingResponseLambda ResponseLambda, FGrpcMetaData MetaData = FGrpcMetaData(), float DeadLineSeconds = 0.f);

public:
	class Private;
	Private* const d = nullptr;

public:
	UUESynthService();
	virtual ~UUESynthService();
};

